# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Proofo.ui'
#
# Created by: PyQt5 UI code generator 5.14.2
#
# WARNING! All changes made in this file will be lost!
import sys
import urllib3
import sqlite3
from FindingDetailWindow import Ui_FindingDetailWindow
from TestInformationOverview import Ui_TestOverviewWindow

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QWidget, QApplication,QMainWindow, QListWidget,QTableWidgetItem, QAction, QVBoxLayout, QTableWidget, QCompleter
from PyQt5.QtSql import *
from urllib.request import urlopen
from bs4 import BeautifulSoup
from urllib.parse import urlparse
urllib3.disable_warnings()

class Ui_Proofo(object):
    def setupUi(self, Proofo):
        Proofo.setObjectName("Proofo")
        Proofo.resize(700, 1122)
        Proofo.setMinimumSize(QtCore.QSize(700, 700))
        Proofo.setMaximumSize(QtCore.QSize(700, 1122))
        Proofo.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        Proofo.setAutoFillBackground(False)
        Proofo.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(Proofo)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_67 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_67.setObjectName("verticalLayout_67")
        self.AllTabs = QtWidgets.QTabWidget(self.centralwidget)
        self.AllTabs.setMinimumSize(QtCore.QSize(680, 600))
        self.AllTabs.setMaximumSize(QtCore.QSize(680, 1060))
        font = QtGui.QFont()
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.AllTabs.setFont(font)
        self.AllTabs.setAutoFillBackground(False)
        self.AllTabs.setObjectName("AllTabs")
        self.LoginPageTAB = QtWidgets.QWidget()
        self.LoginPageTAB.setObjectName("LoginPageTAB")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.LoginPageTAB)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        spacerItem = QtWidgets.QSpacerItem(20, 60, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_4.addItem(spacerItem)
        self.ProofoLBL = QtWidgets.QLabel(self.LoginPageTAB)
        self.ProofoLBL.setMaximumSize(QtCore.QSize(16777215, 300))
        font = QtGui.QFont()
        font.setFamily("Bodoni MT")
        font.setPointSize(72)
        font.setBold(False)
        font.setItalic(True)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.ProofoLBL.setFont(font)
        self.ProofoLBL.setStyleSheet("color: rgb(0, 170, 255);")
        self.ProofoLBL.setObjectName("ProofoLBL")
        self.verticalLayout_4.addWidget(self.ProofoLBL, 0, QtCore.Qt.AlignHCenter)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem1)
        self.AllTabs.addTab(self.LoginPageTAB, "")
        self.Information = QtWidgets.QWidget()
        self.Information.setObjectName("Information")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.Information)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setContentsMargins(-1, -1, 400, -1)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.ClearContentInformation = QtWidgets.QPushButton(self.Information)
        self.ClearContentInformation.setMaximumSize(QtCore.QSize(100, 25))
        self.ClearContentInformation.setIconSize(QtCore.QSize(15, 15))
        self.ClearContentInformation.setObjectName("ClearContentInformation")
        self.horizontalLayout_22.addWidget(self.ClearContentInformation)
        self.SubmitInformationBox_2 = QtWidgets.QPushButton(self.Information)
        self.SubmitInformationBox_2.setMaximumSize(QtCore.QSize(100, 25))
        self.SubmitInformationBox_2.setObjectName("SubmitInformationBox_2")
        self.horizontalLayout_22.addWidget(self.SubmitInformationBox_2)
        self.gridLayout_12.addLayout(self.horizontalLayout_22, 1, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 200, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_12.addItem(spacerItem2, 2, 0, 1, 1)
        self.InformationTab = QtWidgets.QTabWidget(self.Information)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.InformationTab.sizePolicy().hasHeightForWidth())
        self.InformationTab.setSizePolicy(sizePolicy)
        self.InformationTab.setMinimumSize(QtCore.QSize(650, 0))
        self.InformationTab.setMaximumSize(QtCore.QSize(650, 320))
        self.InformationTab.setObjectName("InformationTab")
        self.ReportTAB = QtWidgets.QWidget()
        self.ReportTAB.setObjectName("ReportTAB")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.ReportTAB)
        self.gridLayout_5.setObjectName("gridLayout_5")
        spacerItem3 = QtWidgets.QSpacerItem(220, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem3, 3, 1, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(self.ReportTAB)
        self.textBrowser.setMaximumSize(QtCore.QSize(220, 16777215))
        self.textBrowser.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textBrowser.setFrameShadow(QtWidgets.QFrame.Plain)
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout_5.addWidget(self.textBrowser, 1, 1, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem4, 4, 0, 1, 1)
        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setContentsMargins(0, -1, 0, -1)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.TestIDLBL = QtWidgets.QLabel(self.ReportTAB)
        self.TestIDLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.TestIDLBL.setMaximumSize(QtCore.QSize(120, 25))
        self.TestIDLBL.setObjectName("TestIDLBL")
        self.horizontalLayout_23.addWidget(self.TestIDLBL)
        self.TestIDLineEdit = QtWidgets.QLineEdit(self.ReportTAB)
        self.TestIDLineEdit.setObjectName("TestIDLineEdit")
        self.horizontalLayout_23.addWidget(self.TestIDLineEdit)
        self.verticalLayout_24.addLayout(self.horizontalLayout_23)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.TestNameLBL = QtWidgets.QLabel(self.ReportTAB)
        self.TestNameLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.TestNameLBL.setMaximumSize(QtCore.QSize(120, 25))
        self.TestNameLBL.setObjectName("TestNameLBL")
        self.horizontalLayout_24.addWidget(self.TestNameLBL)
        self.TestNameLineEdit = QtWidgets.QLineEdit(self.ReportTAB)
        self.TestNameLineEdit.setObjectName("TestNameLineEdit")
        self.horizontalLayout_24.addWidget(self.TestNameLineEdit)
        self.verticalLayout_24.addLayout(self.horizontalLayout_24)
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.TestDescriptionLBL = QtWidgets.QLabel(self.ReportTAB)
        self.TestDescriptionLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.TestDescriptionLBL.setMaximumSize(QtCore.QSize(120, 25))
        self.TestDescriptionLBL.setObjectName("TestDescriptionLBL")
        self.horizontalLayout_25.addWidget(self.TestDescriptionLBL)
        self.TestDescriptionLineEdit = QtWidgets.QLineEdit(self.ReportTAB)
        self.TestDescriptionLineEdit.setObjectName("TestDescriptionLineEdit")
        self.horizontalLayout_25.addWidget(self.TestDescriptionLineEdit)
        self.verticalLayout_24.addLayout(self.horizontalLayout_25)
        self.line_5 = QtWidgets.QFrame(self.ReportTAB)
        self.line_5.setMinimumSize(QtCore.QSize(0, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.verticalLayout_24.addWidget(self.line_5)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.ReportTitleLBL_2 = QtWidgets.QLabel(self.ReportTAB)
        self.ReportTitleLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.ReportTitleLBL_2.setMaximumSize(QtCore.QSize(120, 16777215))
        self.ReportTitleLBL_2.setObjectName("ReportTitleLBL_2")
        self.horizontalLayout_26.addWidget(self.ReportTitleLBL_2)
        self.ReportTitleBox_2 = QtWidgets.QLineEdit(self.ReportTAB)
        self.ReportTitleBox_2.setObjectName("ReportTitleBox_2")
        self.horizontalLayout_26.addWidget(self.ReportTitleBox_2)
        self.verticalLayout_24.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.AssessmentTypeLBL_2 = QtWidgets.QLabel(self.ReportTAB)
        self.AssessmentTypeLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.AssessmentTypeLBL_2.setMaximumSize(QtCore.QSize(120, 16777215))
        self.AssessmentTypeLBL_2.setObjectName("AssessmentTypeLBL_2")
        self.horizontalLayout_28.addWidget(self.AssessmentTypeLBL_2)
        self.AssessmentTypeBox_2 = QtWidgets.QLineEdit(self.ReportTAB)
        self.AssessmentTypeBox_2.setObjectName("AssessmentTypeBox_2")
        self.horizontalLayout_28.addWidget(self.AssessmentTypeBox_2)
        self.verticalLayout_24.addLayout(self.horizontalLayout_28)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.ScoringTypeLBL_2 = QtWidgets.QLabel(self.ReportTAB)
        self.ScoringTypeLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.ScoringTypeLBL_2.setMaximumSize(QtCore.QSize(120, 16777215))
        self.ScoringTypeLBL_2.setObjectName("ScoringTypeLBL_2")
        self.horizontalLayout_29.addWidget(self.ScoringTypeLBL_2)
        self.ScoringTypeBox_2 = QtWidgets.QLineEdit(self.ReportTAB)
        self.ScoringTypeBox_2.setObjectName("ScoringTypeBox_2")
        self.horizontalLayout_29.addWidget(self.ScoringTypeBox_2)
        self.verticalLayout_24.addLayout(self.horizontalLayout_29)
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_30.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.FullCompNameLBL_2 = QtWidgets.QLabel(self.ReportTAB)
        self.FullCompNameLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.FullCompNameLBL_2.setMaximumSize(QtCore.QSize(120, 16777215))
        self.FullCompNameLBL_2.setObjectName("FullCompNameLBL_2")
        self.horizontalLayout_30.addWidget(self.FullCompNameLBL_2)
        self.FullCompNameBox_2 = QtWidgets.QLineEdit(self.ReportTAB)
        self.FullCompNameBox_2.setObjectName("FullCompNameBox_2")
        self.horizontalLayout_30.addWidget(self.FullCompNameBox_2)
        self.verticalLayout_24.addLayout(self.horizontalLayout_30)
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setContentsMargins(-1, -1, 0, -1)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.ShortCompNameLBL_2 = QtWidgets.QLabel(self.ReportTAB)
        self.ShortCompNameLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.ShortCompNameLBL_2.setMaximumSize(QtCore.QSize(120, 16777215))
        self.ShortCompNameLBL_2.setObjectName("ShortCompNameLBL_2")
        self.horizontalLayout_31.addWidget(self.ShortCompNameLBL_2)
        self.ShortCompNameBox_2 = QtWidgets.QLineEdit(self.ReportTAB)
        self.ShortCompNameBox_2.setObjectName("ShortCompNameBox_2")
        self.horizontalLayout_31.addWidget(self.ShortCompNameBox_2)
        self.verticalLayout_24.addLayout(self.horizontalLayout_31)
        self.gridLayout_5.addLayout(self.verticalLayout_24, 1, 0, 1, 1)
        self.InformationTab.addTab(self.ReportTAB, "")
        self.ContactCompanyTAB = QtWidgets.QWidget()
        self.ContactCompanyTAB.setObjectName("ContactCompanyTAB")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.ContactCompanyTAB)
        self.gridLayout_7.setObjectName("gridLayout_7")
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_7.addItem(spacerItem5, 1, 0, 1, 1)
        self.verticalLayout_25 = QtWidgets.QVBoxLayout()
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.ContactTitleLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.ContactTitleLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.ContactTitleLBL_2.setObjectName("ContactTitleLBL_2")
        self.horizontalLayout_39.addWidget(self.ContactTitleLBL_2)
        self.ContactTitleBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.ContactTitleBox_2.setObjectName("ContactTitleBox_2")
        self.horizontalLayout_39.addWidget(self.ContactTitleBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_39)
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.ContactNameLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.ContactNameLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.ContactNameLBL_2.setObjectName("ContactNameLBL_2")
        self.horizontalLayout_38.addWidget(self.ContactNameLBL_2)
        self.ContactNameBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.ContactNameBox_2.setObjectName("ContactNameBox_2")
        self.horizontalLayout_38.addWidget(self.ContactNameBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_38)
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.ContactTelephoneLBL = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.ContactTelephoneLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ContactTelephoneLBL.setObjectName("ContactTelephoneLBL")
        self.horizontalLayout_37.addWidget(self.ContactTelephoneLBL)
        self.ContactTelephoneBox = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.ContactTelephoneBox.setObjectName("ContactTelephoneBox")
        self.horizontalLayout_37.addWidget(self.ContactTelephoneBox)
        self.verticalLayout_25.addLayout(self.horizontalLayout_37)
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.ContactEmailLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.ContactEmailLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.ContactEmailLBL_2.setObjectName("ContactEmailLBL_2")
        self.horizontalLayout_36.addWidget(self.ContactEmailLBL_2)
        self.ContactEmailBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.ContactEmailBox_2.setObjectName("ContactEmailBox_2")
        self.horizontalLayout_36.addWidget(self.ContactEmailBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_36)
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.CompWebsiteLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.CompWebsiteLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.CompWebsiteLBL_2.setObjectName("CompWebsiteLBL_2")
        self.horizontalLayout_35.addWidget(self.CompWebsiteLBL_2)
        self.CompWebsiteBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.CompWebsiteBox_2.setObjectName("CompWebsiteBox_2")
        self.horizontalLayout_35.addWidget(self.CompWebsiteBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_35)
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.CompAddressLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.CompAddressLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.CompAddressLBL_2.setObjectName("CompAddressLBL_2")
        self.horizontalLayout_34.addWidget(self.CompAddressLBL_2)
        self.CompAddressBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.CompAddressBox_2.setObjectName("CompAddressBox_2")
        self.horizontalLayout_34.addWidget(self.CompAddressBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_34)
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.CompCityLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.CompCityLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.CompCityLBL_2.setObjectName("CompCityLBL_2")
        self.horizontalLayout_33.addWidget(self.CompCityLBL_2)
        self.CompCityBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.CompCityBox_2.setObjectName("CompCityBox_2")
        self.horizontalLayout_33.addWidget(self.CompCityBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_33)
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.StateLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.StateLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.StateLBL_2.setObjectName("StateLBL_2")
        self.horizontalLayout_32.addWidget(self.StateLBL_2)
        self.StateBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.StateBox_2.setObjectName("StateBox_2")
        self.horizontalLayout_32.addWidget(self.StateBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_32)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.CompPostCodeLBL_2 = QtWidgets.QLabel(self.ContactCompanyTAB)
        self.CompPostCodeLBL_2.setMinimumSize(QtCore.QSize(120, 0))
        self.CompPostCodeLBL_2.setObjectName("CompPostCodeLBL_2")
        self.horizontalLayout_16.addWidget(self.CompPostCodeLBL_2)
        self.CompPostCodeBox_2 = QtWidgets.QLineEdit(self.ContactCompanyTAB)
        self.CompPostCodeBox_2.setObjectName("CompPostCodeBox_2")
        self.horizontalLayout_16.addWidget(self.CompPostCodeBox_2)
        self.verticalLayout_25.addLayout(self.horizontalLayout_16)
        self.gridLayout_7.addLayout(self.verticalLayout_25, 0, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(220, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_7.addItem(spacerItem6, 0, 1, 1, 1)
        self.InformationTab.addTab(self.ContactCompanyTAB, "")
        self.TesterTAB = QtWidgets.QWidget()
        self.TesterTAB.setObjectName("TesterTAB")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.TesterTAB)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout()
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.horizontalLayout_47 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_47.setObjectName("horizontalLayout_47")
        self.ConsultantCompanyNameLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantCompanyNameLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantCompanyNameLBL.setObjectName("ConsultantCompanyNameLBL")
        self.horizontalLayout_47.addWidget(self.ConsultantCompanyNameLBL)
        self.ConsultantCompanyNameBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantCompanyNameBox.setObjectName("ConsultantCompanyNameBox")
        self.horizontalLayout_47.addWidget(self.ConsultantCompanyNameBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_47)
        self.horizontalLayout_45 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_45.setObjectName("horizontalLayout_45")
        self.ConsultantTitleLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantTitleLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantTitleLBL.setObjectName("ConsultantTitleLBL")
        self.horizontalLayout_45.addWidget(self.ConsultantTitleLBL)
        self.ConsultantTitleBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantTitleBox.setObjectName("ConsultantTitleBox")
        self.horizontalLayout_45.addWidget(self.ConsultantTitleBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_45)
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        self.ConsultantContactNameLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantContactNameLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantContactNameLBL.setObjectName("ConsultantContactNameLBL")
        self.horizontalLayout_46.addWidget(self.ConsultantContactNameLBL)
        self.ConsultantNameBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantNameBox.setObjectName("ConsultantNameBox")
        self.horizontalLayout_46.addWidget(self.ConsultantNameBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_46)
        self.horizontalLayout_44 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_44.setObjectName("horizontalLayout_44")
        self.ConsultantTelephoneLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantTelephoneLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantTelephoneLBL.setObjectName("ConsultantTelephoneLBL")
        self.horizontalLayout_44.addWidget(self.ConsultantTelephoneLBL)
        self.ConsultantTelephoneBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantTelephoneBox.setObjectName("ConsultantTelephoneBox")
        self.horizontalLayout_44.addWidget(self.ConsultantTelephoneBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_44)
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.ConsultantEmailLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantEmailLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantEmailLBL.setObjectName("ConsultantEmailLBL")
        self.horizontalLayout_43.addWidget(self.ConsultantEmailLBL)
        self.ConsultantEmailBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantEmailBox.setObjectName("ConsultantEmailBox")
        self.horizontalLayout_43.addWidget(self.ConsultantEmailBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_43)
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.ConsultantAddressLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantAddressLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantAddressLBL.setObjectName("ConsultantAddressLBL")
        self.horizontalLayout_42.addWidget(self.ConsultantAddressLBL)
        self.ConsultantBusinessAddressBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantBusinessAddressBox.setObjectName("ConsultantBusinessAddressBox")
        self.horizontalLayout_42.addWidget(self.ConsultantBusinessAddressBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_42)
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.ConsultantCityLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantCityLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantCityLBL.setObjectName("ConsultantCityLBL")
        self.horizontalLayout_41.addWidget(self.ConsultantCityLBL)
        self.ConsultantCityBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantCityBox.setObjectName("ConsultantCityBox")
        self.horizontalLayout_41.addWidget(self.ConsultantCityBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_41)
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")
        self.ConsultantWebsiteLBL = QtWidgets.QLabel(self.TesterTAB)
        self.ConsultantWebsiteLBL.setMinimumSize(QtCore.QSize(120, 0))
        self.ConsultantWebsiteLBL.setObjectName("ConsultantWebsiteLBL")
        self.horizontalLayout_40.addWidget(self.ConsultantWebsiteLBL)
        self.ConsultantWebsiteBox = QtWidgets.QLineEdit(self.TesterTAB)
        self.ConsultantWebsiteBox.setObjectName("ConsultantWebsiteBox")
        self.horizontalLayout_40.addWidget(self.ConsultantWebsiteBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_40)
        self.gridLayout_8.addLayout(self.verticalLayout_26, 0, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_8.addItem(spacerItem7, 1, 0, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(220, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem8, 0, 1, 1, 1)
        self.InformationTab.addTab(self.TesterTAB, "")
        self.gridLayout_12.addWidget(self.InformationTab, 0, 0, 1, 1)
        self.AllTabs.addTab(self.Information, "")
        self.SummariesTAB = QtWidgets.QWidget()
        self.SummariesTAB.setObjectName("SummariesTAB")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.SummariesTAB)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self.scrollArea = QtWidgets.QScrollArea(self.SummariesTAB)
        self.scrollArea.setMinimumSize(QtCore.QSize(650, 600))
        self.scrollArea.setMaximumSize(QtCore.QSize(650, 1060))
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 633, 1291))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.SummaryTestIDLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.SummaryTestIDLBL.setMinimumSize(QtCore.QSize(60, 20))
        self.SummaryTestIDLBL.setMaximumSize(QtCore.QSize(60, 20))
        self.SummaryTestIDLBL.setObjectName("SummaryTestIDLBL")
        self.verticalLayout_2.addWidget(self.SummaryTestIDLBL)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.SummaryTestIDLineEdit = QtWidgets.QLineEdit(self.scrollAreaWidgetContents)
        self.SummaryTestIDLineEdit.setMaximumSize(QtCore.QSize(100, 16777215))
        self.SummaryTestIDLineEdit.setReadOnly(True)
        self.SummaryTestIDLineEdit.setObjectName("SummaryTestIDLineEdit")
        self.horizontalLayout_14.addWidget(self.SummaryTestIDLineEdit)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_14.addItem(spacerItem9)
        self.verticalLayout_2.addLayout(self.horizontalLayout_14)
        self.ExecutiveSummaryLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.ExecutiveSummaryLBL.setMinimumSize(QtCore.QSize(120, 20))
        self.ExecutiveSummaryLBL.setMaximumSize(QtCore.QSize(120, 20))
        self.ExecutiveSummaryLBL.setObjectName("ExecutiveSummaryLBL")
        self.verticalLayout_2.addWidget(self.ExecutiveSummaryLBL)
        self.ExecutiveSummaryTextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.ExecutiveSummaryTextEdit.setMinimumSize(QtCore.QSize(600, 120))
        self.ExecutiveSummaryTextEdit.setMaximumSize(QtCore.QSize(600, 120))
        self.ExecutiveSummaryTextEdit.setObjectName("ExecutiveSummaryTextEdit")
        self.verticalLayout_2.addWidget(self.ExecutiveSummaryTextEdit)
        self.ScopeLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.ScopeLBL.setMinimumSize(QtCore.QSize(50, 20))
        self.ScopeLBL.setMaximumSize(QtCore.QSize(50, 20))
        self.ScopeLBL.setObjectName("ScopeLBL")
        self.verticalLayout_2.addWidget(self.ScopeLBL)
        self.ScopeTextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.ScopeTextEdit.setMinimumSize(QtCore.QSize(600, 120))
        self.ScopeTextEdit.setMaximumSize(QtCore.QSize(600, 120))
        self.ScopeTextEdit.setObjectName("ScopeTextEdit")
        self.verticalLayout_2.addWidget(self.ScopeTextEdit)
        self.ProjectObjectivesLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.ProjectObjectivesLBL.setMinimumSize(QtCore.QSize(120, 20))
        self.ProjectObjectivesLBL.setMaximumSize(QtCore.QSize(120, 20))
        self.ProjectObjectivesLBL.setObjectName("ProjectObjectivesLBL")
        self.verticalLayout_2.addWidget(self.ProjectObjectivesLBL)
        self.ProjectObjectivesTextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.ProjectObjectivesTextEdit.setMinimumSize(QtCore.QSize(600, 120))
        self.ProjectObjectivesTextEdit.setMaximumSize(QtCore.QSize(600, 120))
        self.ProjectObjectivesTextEdit.setObjectName("ProjectObjectivesTextEdit")
        self.verticalLayout_2.addWidget(self.ProjectObjectivesTextEdit)
        self.AssumptionsLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.AssumptionsLBL.setMinimumSize(QtCore.QSize(100, 20))
        self.AssumptionsLBL.setMaximumSize(QtCore.QSize(100, 20))
        self.AssumptionsLBL.setObjectName("AssumptionsLBL")
        self.verticalLayout_2.addWidget(self.AssumptionsLBL)
        self.AssumptionTextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.AssumptionTextEdit.setMinimumSize(QtCore.QSize(600, 120))
        self.AssumptionTextEdit.setMaximumSize(QtCore.QSize(600, 120))
        self.AssumptionTextEdit.setObjectName("AssumptionTextEdit")
        self.verticalLayout_2.addWidget(self.AssumptionTextEdit)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.SummaryofFindingsLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.SummaryofFindingsLBL.setMinimumSize(QtCore.QSize(120, 20))
        self.SummaryofFindingsLBL.setMaximumSize(QtCore.QSize(120, 20))
        self.SummaryofFindingsLBL.setObjectName("SummaryofFindingsLBL")
        self.verticalLayout.addWidget(self.SummaryofFindingsLBL)
        self.SummaryFindingTable_Window = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.SummaryFindingTable_Window.setMinimumSize(QtCore.QSize(0, 200))
        self.SummaryFindingTable_Window.setMaximumSize(QtCore.QSize(16777215, 200))
        self.SummaryFindingTable_Window.setObjectName("SummaryFindingTable_Window")
        self.SummaryFindingTable_Window.setColumnCount(3)
        self.SummaryFindingTable_Window.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.SummaryFindingTable_Window.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SummaryFindingTable_Window.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SummaryFindingTable_Window.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SummaryFindingTable_Window.setHorizontalHeaderItem(2, item)
        self.verticalLayout.addWidget(self.SummaryFindingTable_Window)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.AddRowBTN = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.AddRowBTN.setObjectName("AddRowBTN")
        self.horizontalLayout_13.addWidget(self.AddRowBTN)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem10)
        self.verticalLayout.addLayout(self.horizontalLayout_13)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.SummaryofRecommendationLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.SummaryofRecommendationLBL.setMinimumSize(QtCore.QSize(160, 20))
        self.SummaryofRecommendationLBL.setMaximumSize(QtCore.QSize(160, 20))
        self.SummaryofRecommendationLBL.setObjectName("SummaryofRecommendationLBL")
        self.verticalLayout_2.addWidget(self.SummaryofRecommendationLBL)
        self.SummaryofRecommendationTextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.SummaryofRecommendationTextEdit.setMinimumSize(QtCore.QSize(600, 120))
        self.SummaryofRecommendationTextEdit.setMaximumSize(QtCore.QSize(600, 120))
        self.SummaryofRecommendationTextEdit.setObjectName("SummaryofRecommendationTextEdit")
        self.verticalLayout_2.addWidget(self.SummaryofRecommendationTextEdit)
        self.MethodologyLBL = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.MethodologyLBL.setMinimumSize(QtCore.QSize(160, 20))
        self.MethodologyLBL.setMaximumSize(QtCore.QSize(160, 20))
        self.MethodologyLBL.setObjectName("MethodologyLBL")
        self.verticalLayout_2.addWidget(self.MethodologyLBL)
        self.MethodologyTextEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.MethodologyTextEdit.setMinimumSize(QtCore.QSize(600, 120))
        self.MethodologyTextEdit.setMaximumSize(QtCore.QSize(600, 120))
        self.MethodologyTextEdit.setObjectName("MethodologyTextEdit")
        self.verticalLayout_2.addWidget(self.MethodologyTextEdit)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem11)
        self.verticalLayout_66 = QtWidgets.QVBoxLayout()
        self.verticalLayout_66.setObjectName("verticalLayout_66")
        self.AddtoDatabaseSummaryBTN = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        self.AddtoDatabaseSummaryBTN.setMinimumSize(QtCore.QSize(120, 30))
        self.AddtoDatabaseSummaryBTN.setMaximumSize(QtCore.QSize(120, 30))
        self.AddtoDatabaseSummaryBTN.setObjectName("AddtoDatabaseSummaryBTN")
        self.verticalLayout_66.addWidget(self.AddtoDatabaseSummaryBTN)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_66.addItem(spacerItem12)
        self.horizontalLayout_12.addLayout(self.verticalLayout_66)
        self.verticalLayout_2.addLayout(self.horizontalLayout_12)
        self.verticalLayout_7.addLayout(self.verticalLayout_2)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_35.addWidget(self.scrollArea)
        self.AllTabs.addTab(self.SummariesTAB, "")
        self.CVE = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        font.setItalic(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.CVE.setFont(font)
        self.CVE.setMouseTracking(True)
        self.CVE.setAccessibleName("")
        self.CVE.setAutoFillBackground(False)
        self.CVE.setObjectName("CVE")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.CVE)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.line_6 = QtWidgets.QFrame(self.CVE)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.horizontalLayout_15.addWidget(self.line_6)
        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        spacerItem13 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_22.addItem(spacerItem13)
        self.CVETestIDLBL = QtWidgets.QLabel(self.CVE)
        self.CVETestIDLBL.setObjectName("CVETestIDLBL")
        self.verticalLayout_22.addWidget(self.CVETestIDLBL)
        self.CVETestIDLineEdit = QtWidgets.QLineEdit(self.CVE)
        self.CVETestIDLineEdit.setReadOnly(True)
        self.CVETestIDLineEdit.setObjectName("CVETestIDLineEdit")
        self.verticalLayout_22.addWidget(self.CVETestIDLineEdit)
        spacerItem14 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_22.addItem(spacerItem14)
        self.SelectOption = QtWidgets.QLabel(self.CVE)
        self.SelectOption.setMaximumSize(QtCore.QSize(100, 20))
        self.SelectOption.setObjectName("SelectOption")
        self.verticalLayout_22.addWidget(self.SelectOption)
        self.CVEName = QtWidgets.QCheckBox(self.CVE)
        self.CVEName.setMaximumSize(QtCore.QSize(100, 20))
        self.CVEName.setObjectName("CVEName")
        self.verticalLayout_22.addWidget(self.CVEName)
        self.CVSS = QtWidgets.QCheckBox(self.CVE)
        self.CVSS.setMaximumSize(QtCore.QSize(100, 20))
        self.CVSS.setObjectName("CVSS")
        self.verticalLayout_22.addWidget(self.CVSS)
        self.CVEDate = QtWidgets.QCheckBox(self.CVE)
        self.CVEDate.setMaximumSize(QtCore.QSize(100, 20))
        self.CVEDate.setObjectName("CVEDate")
        self.verticalLayout_22.addWidget(self.CVEDate)
        self.CVECriticality = QtWidgets.QCheckBox(self.CVE)
        self.CVECriticality.setMaximumSize(QtCore.QSize(150, 20))
        self.CVECriticality.setObjectName("CVECriticality")
        self.verticalLayout_22.addWidget(self.CVECriticality)
        self.CVEDescription = QtWidgets.QCheckBox(self.CVE)
        self.CVEDescription.setMaximumSize(QtCore.QSize(150, 20))
        self.CVEDescription.setObjectName("CVEDescription")
        self.verticalLayout_22.addWidget(self.CVEDescription)
        self.CVERemediation = QtWidgets.QCheckBox(self.CVE)
        self.CVERemediation.setMaximumSize(QtCore.QSize(150, 20))
        self.CVERemediation.setMouseTracking(True)
        self.CVERemediation.setObjectName("CVERemediation")
        self.verticalLayout_22.addWidget(self.CVERemediation)
        self.AllOptions = QtWidgets.QCheckBox(self.CVE)
        self.AllOptions.setMaximumSize(QtCore.QSize(150, 20))
        self.AllOptions.setObjectName("AllOptions")
        self.verticalLayout_22.addWidget(self.AllOptions)
        self.ExtractCVEButton = QtWidgets.QPushButton(self.CVE)
        self.ExtractCVEButton.setMaximumSize(QtCore.QSize(100, 23))
        self.ExtractCVEButton.setObjectName("ExtractCVEButton")
        self.verticalLayout_22.addWidget(self.ExtractCVEButton)
        self.Save2DatabaseBTN = QtWidgets.QPushButton(self.CVE)
        self.Save2DatabaseBTN.setMaximumSize(QtCore.QSize(100, 23))
        self.Save2DatabaseBTN.setObjectName("Save2DatabaseBTN")
        self.verticalLayout_22.addWidget(self.Save2DatabaseBTN)
        self.ClearContent = QtWidgets.QPushButton(self.CVE)
        self.ClearContent.setMaximumSize(QtCore.QSize(100, 23))
        self.ClearContent.setObjectName("ClearContent")
        self.verticalLayout_22.addWidget(self.ClearContent)
        spacerItem15 = QtWidgets.QSpacerItem(20, 650, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_22.addItem(spacerItem15)
        self.horizontalLayout_15.addLayout(self.verticalLayout_22)
        self.gridLayout_10.addLayout(self.horizontalLayout_15, 0, 1, 1, 1)
        self.verticalLayout_34 = QtWidgets.QVBoxLayout()
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout()
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout()
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.InputURL = QtWidgets.QLabel(self.CVE)
        self.InputURL.setMaximumSize(QtCore.QSize(16777215, 15))
        self.InputURL.setObjectName("InputURL")
        self.verticalLayout_29.addWidget(self.InputURL)
        self.URLEnterBox = QtWidgets.QLineEdit(self.CVE)
        self.URLEnterBox.setObjectName("URLEnterBox")
        self.verticalLayout_29.addWidget(self.URLEnterBox)
        self.verticalLayout_30.addLayout(self.verticalLayout_29)
        self.DisplayLBL = QtWidgets.QLabel(self.CVE)
        self.DisplayLBL.setMinimumSize(QtCore.QSize(0, 40))
        self.DisplayLBL.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Eras Bold ITC")
        font.setPointSize(18)
        self.DisplayLBL.setFont(font)
        self.DisplayLBL.setObjectName("DisplayLBL")
        self.verticalLayout_30.addWidget(self.DisplayLBL)
        self.verticalLayout_34.addLayout(self.verticalLayout_30)
        self.verticalLayout_33 = QtWidgets.QVBoxLayout()
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout()
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.CVENameLBLDisplay = QtWidgets.QLabel(self.CVE)
        self.CVENameLBLDisplay.setMaximumSize(QtCore.QSize(100, 25))
        self.CVENameLBLDisplay.setObjectName("CVENameLBLDisplay")
        self.verticalLayout_32.addWidget(self.CVENameLBLDisplay)
        self.horizontalLayout_51 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_51.setObjectName("horizontalLayout_51")
        self.CVENameTextEdit = QtWidgets.QTextEdit(self.CVE)
        self.CVENameTextEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.CVENameTextEdit.setObjectName("CVENameTextEdit")
        self.horizontalLayout_51.addWidget(self.CVENameTextEdit)
        spacerItem16 = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_51.addItem(spacerItem16)
        self.verticalLayout_32.addLayout(self.horizontalLayout_51)
        self.verticalLayout_33.addLayout(self.verticalLayout_32)
        self.verticalLayout_31 = QtWidgets.QVBoxLayout()
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.CVSSLBLDisplay = QtWidgets.QLabel(self.CVE)
        self.CVSSLBLDisplay.setMaximumSize(QtCore.QSize(100, 25))
        self.CVSSLBLDisplay.setObjectName("CVSSLBLDisplay")
        self.verticalLayout_31.addWidget(self.CVSSLBLDisplay)
        self.horizontalLayout_50 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_50.setObjectName("horizontalLayout_50")
        self.CVSSTextEdit = QtWidgets.QTextEdit(self.CVE)
        self.CVSSTextEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.CVSSTextEdit.setObjectName("CVSSTextEdit")
        self.horizontalLayout_50.addWidget(self.CVSSTextEdit)
        spacerItem17 = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_50.addItem(spacerItem17)
        self.verticalLayout_31.addLayout(self.horizontalLayout_50)
        self.verticalLayout_33.addLayout(self.verticalLayout_31)
        self.verticalLayout_28 = QtWidgets.QVBoxLayout()
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.CVEDateLBLDisplay = QtWidgets.QLabel(self.CVE)
        self.CVEDateLBLDisplay.setMaximumSize(QtCore.QSize(100, 25))
        self.CVEDateLBLDisplay.setObjectName("CVEDateLBLDisplay")
        self.verticalLayout_28.addWidget(self.CVEDateLBLDisplay)
        self.horizontalLayout_49 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_49.setObjectName("horizontalLayout_49")
        self.CVEDateTextEdit = QtWidgets.QTextEdit(self.CVE)
        self.CVEDateTextEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.CVEDateTextEdit.setObjectName("CVEDateTextEdit")
        self.horizontalLayout_49.addWidget(self.CVEDateTextEdit)
        spacerItem18 = QtWidgets.QSpacerItem(400, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_49.addItem(spacerItem18)
        self.verticalLayout_28.addLayout(self.horizontalLayout_49)
        self.verticalLayout_33.addLayout(self.verticalLayout_28)
        self.verticalLayout_27 = QtWidgets.QVBoxLayout()
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.CVECriticalRatingLBLDisplay = QtWidgets.QLabel(self.CVE)
        self.CVECriticalRatingLBLDisplay.setMaximumSize(QtCore.QSize(100, 25))
        self.CVECriticalRatingLBLDisplay.setObjectName("CVECriticalRatingLBLDisplay")
        self.verticalLayout_27.addWidget(self.CVECriticalRatingLBLDisplay)
        self.horizontalLayout_48 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_48.setObjectName("horizontalLayout_48")
        self.CVECriticalRatingTextEdit = QtWidgets.QTextEdit(self.CVE)
        self.CVECriticalRatingTextEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.CVECriticalRatingTextEdit.setObjectName("CVECriticalRatingTextEdit")
        self.horizontalLayout_48.addWidget(self.CVECriticalRatingTextEdit)
        spacerItem19 = QtWidgets.QSpacerItem(400, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_48.addItem(spacerItem19)
        self.verticalLayout_27.addLayout(self.horizontalLayout_48)
        self.verticalLayout_33.addLayout(self.verticalLayout_27)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.CVEDescriptionLBLDisplay = QtWidgets.QLabel(self.CVE)
        self.CVEDescriptionLBLDisplay.setMaximumSize(QtCore.QSize(100, 25))
        self.CVEDescriptionLBLDisplay.setObjectName("CVEDescriptionLBLDisplay")
        self.verticalLayout_6.addWidget(self.CVEDescriptionLBLDisplay)
        self.CVEDescriptionTextEdit = QtWidgets.QTextEdit(self.CVE)
        self.CVEDescriptionTextEdit.setMinimumSize(QtCore.QSize(200, 100))
        self.CVEDescriptionTextEdit.setMaximumSize(QtCore.QSize(500, 100))
        self.CVEDescriptionTextEdit.setReadOnly(True)
        self.CVEDescriptionTextEdit.setObjectName("CVEDescriptionTextEdit")
        self.verticalLayout_6.addWidget(self.CVEDescriptionTextEdit)
        self.CVERemediationLBLDisplay = QtWidgets.QLabel(self.CVE)
        self.CVERemediationLBLDisplay.setMaximumSize(QtCore.QSize(100, 25))
        self.CVERemediationLBLDisplay.setObjectName("CVERemediationLBLDisplay")
        self.verticalLayout_6.addWidget(self.CVERemediationLBLDisplay)
        self.CVERemediationTextEdit = QtWidgets.QTextEdit(self.CVE)
        self.CVERemediationTextEdit.setMinimumSize(QtCore.QSize(200, 100))
        self.CVERemediationTextEdit.setMaximumSize(QtCore.QSize(500, 100))
        self.CVERemediationTextEdit.setObjectName("CVERemediationTextEdit")
        self.verticalLayout_6.addWidget(self.CVERemediationTextEdit)
        spacerItem20 = QtWidgets.QSpacerItem(20, 400, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem20)
        self.verticalLayout_33.addLayout(self.verticalLayout_6)
        self.verticalLayout_34.addLayout(self.verticalLayout_33)
        self.gridLayout_10.addLayout(self.verticalLayout_34, 0, 0, 1, 1)
        self.AllTabs.addTab(self.CVE, "")
        self.Findings = QtWidgets.QWidget()
        self.Findings.setObjectName("Findings")
        self.gridLayout_16 = QtWidgets.QGridLayout(self.Findings)
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.FindingsTabWidget = QtWidgets.QTabWidget(self.Findings)
        self.FindingsTabWidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.FindingsTabWidget.setAcceptDrops(False)
        self.FindingsTabWidget.setObjectName("FindingsTabWidget")
        self.FindingsTab = QtWidgets.QWidget()
        self.FindingsTab.setObjectName("FindingsTab")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.FindingsTab)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.DatabaseLogoLBL = QtWidgets.QLabel(self.FindingsTab)
        font = QtGui.QFont()
        font.setFamily("Eras Bold ITC")
        font.setPointSize(28)
        self.DatabaseLogoLBL.setFont(font)
        self.DatabaseLogoLBL.setObjectName("DatabaseLogoLBL")
        self.horizontalLayout.addWidget(self.DatabaseLogoLBL)
        self.line_2 = QtWidgets.QFrame(self.FindingsTab)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout.addWidget(self.line_2)
        self.horizontalLayout_11.addLayout(self.horizontalLayout)
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem21 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem21)
        self.LoadDatabaseBTN = QtWidgets.QPushButton(self.FindingsTab)
        self.LoadDatabaseBTN.setMaximumSize(QtCore.QSize(125, 25))
        self.LoadDatabaseBTN.setObjectName("LoadDatabaseBTN")
        self.horizontalLayout_2.addWidget(self.LoadDatabaseBTN)
        self.ShowFindingDetailsBTN = QtWidgets.QPushButton(self.FindingsTab)
        self.ShowFindingDetailsBTN.setMaximumSize(QtCore.QSize(120, 25))
        self.ShowFindingDetailsBTN.setObjectName("ShowFindingDetailsBTN")
        self.horizontalLayout_2.addWidget(self.ShowFindingDetailsBTN)
        self.verticalLayout_21.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.DatabaseSearchLogoLBL = QtWidgets.QLabel(self.FindingsTab)
        self.DatabaseSearchLogoLBL.setObjectName("DatabaseSearchLogoLBL")
        self.horizontalLayout_10.addWidget(self.DatabaseSearchLogoLBL)
        self.searchbarLineEdit = QtWidgets.QLineEdit(self.FindingsTab)
        self.searchbarLineEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.searchbarLineEdit.setObjectName("searchbarLineEdit")
        self.horizontalLayout_10.addWidget(self.searchbarLineEdit)
        self.SearchDBBTN = QtWidgets.QPushButton(self.FindingsTab)
        self.SearchDBBTN.setEnabled(True)
        self.SearchDBBTN.setObjectName("SearchDBBTN")
        self.horizontalLayout_10.addWidget(self.SearchDBBTN)
        self.verticalLayout_21.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11.addLayout(self.verticalLayout_21)
        self.gridLayout_11.addLayout(self.horizontalLayout_11, 0, 0, 1, 1)
        self.line = QtWidgets.QFrame(self.FindingsTab)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_11.addWidget(self.line, 1, 0, 1, 1)
        self.DatabaseFrame = QtWidgets.QFrame(self.FindingsTab)
        self.DatabaseFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.DatabaseFrame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.DatabaseFrame.setObjectName("DatabaseFrame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.DatabaseFrame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.DatabaseTable = QtWidgets.QTableWidget(self.DatabaseFrame)
        self.DatabaseTable.setEnabled(True)
        self.DatabaseTable.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.DatabaseTable.setAcceptDrops(True)
        self.DatabaseTable.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.DatabaseTable.setEditTriggers(QtWidgets.QAbstractItemView.SelectedClicked)
        self.DatabaseTable.setDefaultDropAction(QtCore.Qt.LinkAction)
        self.DatabaseTable.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.DatabaseTable.setObjectName("DatabaseTable")
        self.DatabaseTable.setColumnCount(5)
        self.DatabaseTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.DatabaseTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.DatabaseTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.DatabaseTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.DatabaseTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.DatabaseTable.setHorizontalHeaderItem(4, item)
        self.gridLayout_3.addWidget(self.DatabaseTable, 0, 0, 1, 1)
        self.gridLayout_11.addWidget(self.DatabaseFrame, 2, 0, 1, 1)
        self.TotalUsersLBL = QtWidgets.QLabel(self.FindingsTab)
        self.TotalUsersLBL.setObjectName("TotalUsersLBL")
        self.gridLayout_11.addWidget(self.TotalUsersLBL, 3, 0, 1, 1)
        self.FindingsTabWidget.addTab(self.FindingsTab, "")
        self.AddNewFindingTab = QtWidgets.QWidget()
        self.AddNewFindingTab.setObjectName("AddNewFindingTab")
        self.gridLayout = QtWidgets.QGridLayout(self.AddNewFindingTab)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem22 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem22, 6, 0, 2, 1)
        self.NameYourFindingTextEdit = QtWidgets.QTextEdit(self.AddNewFindingTab)
        self.NameYourFindingTextEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.NameYourFindingTextEdit.setObjectName("NameYourFindingTextEdit")
        self.gridLayout.addWidget(self.NameYourFindingTextEdit, 1, 0, 1, 1)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setContentsMargins(100, -1, -1, -1)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.SaveNewFindingButton = QtWidgets.QPushButton(self.AddNewFindingTab)
        self.SaveNewFindingButton.setMaximumSize(QtCore.QSize(110, 16777215))
        self.SaveNewFindingButton.setObjectName("SaveNewFindingButton")
        self.horizontalLayout_17.addWidget(self.SaveNewFindingButton)
        self.ClearContentButton = QtWidgets.QPushButton(self.AddNewFindingTab)
        self.ClearContentButton.setMaximumSize(QtCore.QSize(110, 16777215))
        self.ClearContentButton.setObjectName("ClearContentButton")
        self.horizontalLayout_17.addWidget(self.ClearContentButton)
        self.gridLayout.addLayout(self.horizontalLayout_17, 6, 1, 1, 1)
        self.NewFindingDescriptionTextEdit = QtWidgets.QTextEdit(self.AddNewFindingTab)
        self.NewFindingDescriptionTextEdit.setMaximumSize(QtCore.QSize(16777215, 200))
        self.NewFindingDescriptionTextEdit.setObjectName("NewFindingDescriptionTextEdit")
        self.gridLayout.addWidget(self.NewFindingDescriptionTextEdit, 5, 0, 1, 1)
        self.NewFindingRemediationLBL = QtWidgets.QLabel(self.AddNewFindingTab)
        self.NewFindingRemediationLBL.setObjectName("NewFindingRemediationLBL")
        self.gridLayout.addWidget(self.NewFindingRemediationLBL, 4, 1, 1, 1)
        self.NewFindingRemediationTextEdit = QtWidgets.QTextEdit(self.AddNewFindingTab)
        self.NewFindingRemediationTextEdit.setMaximumSize(QtCore.QSize(16777215, 200))
        self.NewFindingRemediationTextEdit.setObjectName("NewFindingRemediationTextEdit")
        self.gridLayout.addWidget(self.NewFindingRemediationTextEdit, 5, 1, 1, 1)
        self.NameYourFindingLBL = QtWidgets.QLabel(self.AddNewFindingTab)
        self.NameYourFindingLBL.setMaximumSize(QtCore.QSize(16777215, 25))
        self.NameYourFindingLBL.setObjectName("NameYourFindingLBL")
        self.gridLayout.addWidget(self.NameYourFindingLBL, 0, 0, 1, 1)
        self.NewFindingDescriptionLBL = QtWidgets.QLabel(self.AddNewFindingTab)
        self.NewFindingDescriptionLBL.setObjectName("NewFindingDescriptionLBL")
        self.gridLayout.addWidget(self.NewFindingDescriptionLBL, 4, 0, 1, 1)
        self.NewfindingTypeLBL = QtWidgets.QLabel(self.AddNewFindingTab)
        self.NewfindingTypeLBL.setObjectName("NewfindingTypeLBL")
        self.gridLayout.addWidget(self.NewfindingTypeLBL, 2, 1, 1, 1)
        spacerItem23 = QtWidgets.QSpacerItem(20, 150, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem23, 7, 2, 1, 1)
        self.NewFindingCriticalityTextEdit = QtWidgets.QTextEdit(self.AddNewFindingTab)
        self.NewFindingCriticalityTextEdit.setMaximumSize(QtCore.QSize(16777215, 25))
        self.NewFindingCriticalityTextEdit.setObjectName("NewFindingCriticalityTextEdit")
        self.gridLayout.addWidget(self.NewFindingCriticalityTextEdit, 3, 0, 1, 1)
        self.NewfindingTypeTextEdit = QtWidgets.QTextEdit(self.AddNewFindingTab)
        self.NewfindingTypeTextEdit.setMaximumSize(QtCore.QSize(400, 25))
        self.NewfindingTypeTextEdit.setObjectName("NewfindingTypeTextEdit")
        self.gridLayout.addWidget(self.NewfindingTypeTextEdit, 3, 1, 1, 1)
        self.NewFindingCriticalityLBL = QtWidgets.QLabel(self.AddNewFindingTab)
        self.NewFindingCriticalityLBL.setMaximumSize(QtCore.QSize(16777215, 30))
        self.NewFindingCriticalityLBL.setObjectName("NewFindingCriticalityLBL")
        self.gridLayout.addWidget(self.NewFindingCriticalityLBL, 2, 0, 1, 1)
        self.FindingsTabWidget.addTab(self.AddNewFindingTab, "")
        self.gridLayout_16.addWidget(self.FindingsTabWidget, 0, 0, 1, 1)
        self.AllTabs.addTab(self.Findings, "")
        self.RulesofEngagement = QtWidgets.QWidget()
        self.RulesofEngagement.setObjectName("RulesofEngagement")
        self.gridLayout_20 = QtWidgets.QGridLayout(self.RulesofEngagement)
        self.gridLayout_20.setObjectName("gridLayout_20")
        self.RulesofEngagementTABS = QtWidgets.QTabWidget(self.RulesofEngagement)
        self.RulesofEngagementTABS.setMinimumSize(QtCore.QSize(0, 0))
        self.RulesofEngagementTABS.setMaximumSize(QtCore.QSize(1200, 400))
        self.RulesofEngagementTABS.setObjectName("RulesofEngagementTABS")
        self.TypenScopeTAB = QtWidgets.QWidget()
        self.TypenScopeTAB.setObjectName("TypenScopeTAB")
        self.verticalLayout_79 = QtWidgets.QVBoxLayout(self.TypenScopeTAB)
        self.verticalLayout_79.setObjectName("verticalLayout_79")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout()
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout()
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.TypeTestingLBL = QtWidgets.QLabel(self.TypenScopeTAB)
        self.TypeTestingLBL.setMaximumSize(QtCore.QSize(160, 30))
        self.TypeTestingLBL.setObjectName("TypeTestingLBL")
        self.verticalLayout_19.addWidget(self.TypeTestingLBL)
        self.TypeTestingComboBox = QtWidgets.QComboBox(self.TypenScopeTAB)
        self.TypeTestingComboBox.setMaximumSize(QtCore.QSize(160, 20))
        self.TypeTestingComboBox.setObjectName("TypeTestingComboBox")
        self.TypeTestingComboBox.addItem("")
        self.TypeTestingComboBox.addItem("")
        self.TypeTestingComboBox.addItem("")
        self.TypeTestingComboBox.addItem("")
        self.verticalLayout_19.addWidget(self.TypeTestingComboBox)
        self.verticalLayout_20.addLayout(self.verticalLayout_19)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.DescriptionTestingLBL = QtWidgets.QLabel(self.TypenScopeTAB)
        self.DescriptionTestingLBL.setMaximumSize(QtCore.QSize(160, 30))
        self.DescriptionTestingLBL.setObjectName("DescriptionTestingLBL")
        self.verticalLayout_15.addWidget(self.DescriptionTestingLBL)
        self.ScopeTestingTextBox = QtWidgets.QTextEdit(self.TypenScopeTAB)
        self.ScopeTestingTextBox.setMinimumSize(QtCore.QSize(300, 150))
        self.ScopeTestingTextBox.setMaximumSize(QtCore.QSize(300, 150))
        self.ScopeTestingTextBox.setObjectName("ScopeTestingTextBox")
        self.verticalLayout_15.addWidget(self.ScopeTestingTextBox)
        spacerItem24 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_15.addItem(spacerItem24)
        self.verticalLayout_20.addLayout(self.verticalLayout_15)
        self.verticalLayout_79.addLayout(self.verticalLayout_20)
        self.RulesofEngagementTABS.addTab(self.TypenScopeTAB, "")
        self.ClientITteamTAB = QtWidgets.QWidget()
        self.ClientITteamTAB.setObjectName("ClientITteamTAB")
        self.verticalLayout_72 = QtWidgets.QVBoxLayout(self.ClientITteamTAB)
        self.verticalLayout_72.setObjectName("verticalLayout_72")
        self.verticalLayout_71 = QtWidgets.QVBoxLayout()
        self.verticalLayout_71.setObjectName("verticalLayout_71")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.TypeofTestLBL = QtWidgets.QLabel(self.ClientITteamTAB)
        self.TypeofTestLBL.setMaximumSize(QtCore.QSize(230, 30))
        self.TypeofTestLBL.setObjectName("TypeofTestLBL")
        self.verticalLayout_10.addWidget(self.TypeofTestLBL)
        self.AnnouncedorUnAnnouncedComboBox = QtWidgets.QComboBox(self.ClientITteamTAB)
        self.AnnouncedorUnAnnouncedComboBox.setMaximumSize(QtCore.QSize(120, 16777215))
        self.AnnouncedorUnAnnouncedComboBox.setObjectName("AnnouncedorUnAnnouncedComboBox")
        self.AnnouncedorUnAnnouncedComboBox.addItem("")
        self.AnnouncedorUnAnnouncedComboBox.addItem("")
        self.AnnouncedorUnAnnouncedComboBox.addItem("")
        self.verticalLayout_10.addWidget(self.AnnouncedorUnAnnouncedComboBox)
        self.ClientInformedDateTestCheckBoxANNOUNCED = QtWidgets.QCheckBox(self.ClientITteamTAB)
        self.ClientInformedDateTestCheckBoxANNOUNCED.setMaximumSize(QtCore.QSize(280, 30))
        self.ClientInformedDateTestCheckBoxANNOUNCED.setObjectName("ClientInformedDateTestCheckBoxANNOUNCED")
        self.verticalLayout_10.addWidget(self.ClientInformedDateTestCheckBoxANNOUNCED)
        self.ClientInformedSourceIPTestCheckBoxANNOUNCED = QtWidgets.QCheckBox(self.ClientITteamTAB)
        self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setMaximumSize(QtCore.QSize(430, 30))
        self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setObjectName("ClientInformedSourceIPTestCheckBoxANNOUNCED")
        self.verticalLayout_10.addWidget(self.ClientInformedSourceIPTestCheckBoxANNOUNCED)
        self.DiscussIfTestBlockedCheckBoxUNANNOUNCED = QtWidgets.QCheckBox(self.ClientITteamTAB)
        self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setMaximumSize(QtCore.QSize(380, 30))
        self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setObjectName("DiscussIfTestBlockedCheckBoxUNANNOUNCED")
        self.verticalLayout_10.addWidget(self.DiscussIfTestBlockedCheckBoxUNANNOUNCED)
        self.verticalLayout_71.addLayout(self.verticalLayout_10)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setContentsMargins(-1, -1, 470, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem25 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem25)
        self.TestEndsThereCheckBoxUNANNOUNCED = QtWidgets.QCheckBox(self.ClientITteamTAB)
        self.TestEndsThereCheckBoxUNANNOUNCED.setMaximumSize(QtCore.QSize(100, 30))
        self.TestEndsThereCheckBoxUNANNOUNCED.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.TestEndsThereCheckBoxUNANNOUNCED.setObjectName("TestEndsThereCheckBoxUNANNOUNCED")
        self.horizontalLayout_5.addWidget(self.TestEndsThereCheckBoxUNANNOUNCED)
        self.verticalLayout_71.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(-1, -1, 430, -1)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem26 = QtWidgets.QSpacerItem(37, 17, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem26)
        self.ContinueTestingCheckBoxUNANNOUNCED = QtWidgets.QCheckBox(self.ClientITteamTAB)
        self.ContinueTestingCheckBoxUNANNOUNCED.setMaximumSize(QtCore.QSize(140, 30))
        self.ContinueTestingCheckBoxUNANNOUNCED.setObjectName("ContinueTestingCheckBoxUNANNOUNCED")
        self.horizontalLayout_6.addWidget(self.ContinueTestingCheckBoxUNANNOUNCED)
        self.verticalLayout_71.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_100 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_100.setObjectName("horizontalLayout_100")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem27 = QtWidgets.QSpacerItem(65, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem27)
        self.OptionsDependonAimInfoBoxUNANNOUNCED = QtWidgets.QTextEdit(self.ClientITteamTAB)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OptionsDependonAimInfoBoxUNANNOUNCED.sizePolicy().hasHeightForWidth())
        self.OptionsDependonAimInfoBoxUNANNOUNCED.setSizePolicy(sizePolicy)
        self.OptionsDependonAimInfoBoxUNANNOUNCED.setMinimumSize(QtCore.QSize(400, 0))
        self.OptionsDependonAimInfoBoxUNANNOUNCED.setMaximumSize(QtCore.QSize(400, 60))
        self.OptionsDependonAimInfoBoxUNANNOUNCED.setReadOnly(True)
        self.OptionsDependonAimInfoBoxUNANNOUNCED.setObjectName("OptionsDependonAimInfoBoxUNANNOUNCED")
        self.horizontalLayout_7.addWidget(self.OptionsDependonAimInfoBoxUNANNOUNCED)
        self.horizontalLayout_100.addLayout(self.horizontalLayout_7)
        spacerItem28 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_100.addItem(spacerItem28)
        self.verticalLayout_71.addLayout(self.horizontalLayout_100)
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.EscalationMatrixCheckBoxUNANNOUNCED = QtWidgets.QCheckBox(self.ClientITteamTAB)
        self.EscalationMatrixCheckBoxUNANNOUNCED.setMaximumSize(QtCore.QSize(400, 30))
        self.EscalationMatrixCheckBoxUNANNOUNCED.setObjectName("EscalationMatrixCheckBoxUNANNOUNCED")
        self.verticalLayout_23.addWidget(self.EscalationMatrixCheckBoxUNANNOUNCED)
        self.NoteLBL = QtWidgets.QLabel(self.ClientITteamTAB)
        self.NoteLBL.setMaximumSize(QtCore.QSize(50, 30))
        self.NoteLBL.setObjectName("NoteLBL")
        self.verticalLayout_23.addWidget(self.NoteLBL)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.WebAppPenTestInfoBox = QtWidgets.QTextEdit(self.ClientITteamTAB)
        self.WebAppPenTestInfoBox.setMaximumSize(QtCore.QSize(320, 30))
        self.WebAppPenTestInfoBox.setReadOnly(True)
        self.WebAppPenTestInfoBox.setObjectName("WebAppPenTestInfoBox")
        self.verticalLayout_11.addWidget(self.WebAppPenTestInfoBox)
        spacerItem29 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_11.addItem(spacerItem29)
        self.verticalLayout_23.addLayout(self.verticalLayout_11)
        self.verticalLayout_71.addLayout(self.verticalLayout_23)
        self.verticalLayout_72.addLayout(self.verticalLayout_71)
        self.RulesofEngagementTABS.addTab(self.ClientITteamTAB, "")
        self.SensitiveDataTab = QtWidgets.QWidget()
        self.SensitiveDataTab.setObjectName("SensitiveDataTab")
        self.verticalLayout_78 = QtWidgets.QVBoxLayout(self.SensitiveDataTab)
        self.verticalLayout_78.setObjectName("verticalLayout_78")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_75 = QtWidgets.QVBoxLayout()
        self.verticalLayout_75.setObjectName("verticalLayout_75")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setContentsMargins(-1, 0, -1, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.SensitiveDataInfoBox = QtWidgets.QTextEdit(self.SensitiveDataTab)
        self.SensitiveDataInfoBox.setMinimumSize(QtCore.QSize(400, 0))
        self.SensitiveDataInfoBox.setMaximumSize(QtCore.QSize(402, 60))
        self.SensitiveDataInfoBox.setReadOnly(True)
        self.SensitiveDataInfoBox.setObjectName("SensitiveDataInfoBox")
        self.verticalLayout_5.addWidget(self.SensitiveDataInfoBox)
        self.CriteriasLBL = QtWidgets.QLabel(self.SensitiveDataTab)
        self.CriteriasLBL.setMaximumSize(QtCore.QSize(250, 30))
        self.CriteriasLBL.setObjectName("CriteriasLBL")
        self.verticalLayout_5.addWidget(self.CriteriasLBL)
        self.SecureStorageCheckBox = QtWidgets.QCheckBox(self.SensitiveDataTab)
        self.SecureStorageCheckBox.setMaximumSize(QtCore.QSize(270, 30))
        self.SecureStorageCheckBox.setObjectName("SecureStorageCheckBox")
        self.verticalLayout_5.addWidget(self.SecureStorageCheckBox)
        self.DataPrivacyLawsComplianceCheckBox = QtWidgets.QCheckBox(self.SensitiveDataTab)
        self.DataPrivacyLawsComplianceCheckBox.setMaximumSize(QtCore.QSize(270, 30))
        self.DataPrivacyLawsComplianceCheckBox.setObjectName("DataPrivacyLawsComplianceCheckBox")
        self.verticalLayout_5.addWidget(self.DataPrivacyLawsComplianceCheckBox)
        self.CommunicationCheckBox = QtWidgets.QCheckBox(self.SensitiveDataTab)
        self.CommunicationCheckBox.setMaximumSize(QtCore.QSize(250, 30))
        self.CommunicationCheckBox.setObjectName("CommunicationCheckBox")
        self.verticalLayout_5.addWidget(self.CommunicationCheckBox)
        self.verticalLayout_75.addLayout(self.verticalLayout_5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem30 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem30)
        self.verticalLayout_74 = QtWidgets.QVBoxLayout()
        self.verticalLayout_74.setObjectName("verticalLayout_74")
        self.FullDiskEncryptionCheckBox = QtWidgets.QCheckBox(self.SensitiveDataTab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FullDiskEncryptionCheckBox.sizePolicy().hasHeightForWidth())
        self.FullDiskEncryptionCheckBox.setSizePolicy(sizePolicy)
        self.FullDiskEncryptionCheckBox.setMaximumSize(QtCore.QSize(250, 30))
        self.FullDiskEncryptionCheckBox.setTristate(False)
        self.FullDiskEncryptionCheckBox.setObjectName("FullDiskEncryptionCheckBox")
        self.verticalLayout_74.addWidget(self.FullDiskEncryptionCheckBox)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.EncryptingReportsCheckBox = QtWidgets.QCheckBox(self.SensitiveDataTab)
        self.EncryptingReportsCheckBox.setMaximumSize(QtCore.QSize(300, 30))
        self.EncryptingReportsCheckBox.setObjectName("EncryptingReportsCheckBox")
        self.verticalLayout_17.addWidget(self.EncryptingReportsCheckBox)
        spacerItem31 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_17.addItem(spacerItem31)
        self.verticalLayout_74.addLayout(self.verticalLayout_17)
        self.horizontalLayout_3.addLayout(self.verticalLayout_74)
        self.verticalLayout_75.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4.addLayout(self.verticalLayout_75)
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem32)
        self.verticalLayout_78.addLayout(self.horizontalLayout_4)
        self.RulesofEngagementTABS.addTab(self.SensitiveDataTab, "")
        self.MeetingsTab = QtWidgets.QWidget()
        self.MeetingsTab.setObjectName("MeetingsTab")
        self.verticalLayout_77 = QtWidgets.QVBoxLayout(self.MeetingsTab)
        self.verticalLayout_77.setObjectName("verticalLayout_77")
        self.horizontalLayout_99 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_99.setObjectName("horizontalLayout_99")
        self.verticalLayout_76 = QtWidgets.QVBoxLayout()
        self.verticalLayout_76.setObjectName("verticalLayout_76")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.StatusMeetingnReportLBL = QtWidgets.QLabel(self.MeetingsTab)
        self.StatusMeetingnReportLBL.setMaximumSize(QtCore.QSize(150, 20))
        self.StatusMeetingnReportLBL.setObjectName("StatusMeetingnReportLBL")
        self.verticalLayout_13.addWidget(self.StatusMeetingnReportLBL)
        self.ScheduledMeetingsCheckBox = QtWidgets.QCheckBox(self.MeetingsTab)
        self.ScheduledMeetingsCheckBox.setMaximumSize(QtCore.QSize(380, 20))
        self.ScheduledMeetingsCheckBox.setObjectName("ScheduledMeetingsCheckBox")
        self.verticalLayout_13.addWidget(self.ScheduledMeetingsCheckBox)
        self.verticalLayout_76.addLayout(self.verticalLayout_13)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(-1, -1, 200, -1)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        spacerItem33 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem33)
        self.RoutineStatusCheckBox = QtWidgets.QCheckBox(self.MeetingsTab)
        self.RoutineStatusCheckBox.setMaximumSize(QtCore.QSize(300, 20))
        self.RoutineStatusCheckBox.setObjectName("RoutineStatusCheckBox")
        self.horizontalLayout_9.addWidget(self.RoutineStatusCheckBox)
        self.verticalLayout_76.addLayout(self.horizontalLayout_9)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.PresentFindingstoClientCheckBox = QtWidgets.QCheckBox(self.MeetingsTab)
        self.PresentFindingstoClientCheckBox.setMaximumSize(QtCore.QSize(300, 20))
        self.PresentFindingstoClientCheckBox.setObjectName("PresentFindingstoClientCheckBox")
        self.verticalLayout_14.addWidget(self.PresentFindingstoClientCheckBox)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setContentsMargins(-1, -1, 200, -1)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        spacerItem34 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem34)
        self.VulnFoundCheckBox = QtWidgets.QCheckBox(self.MeetingsTab)
        self.VulnFoundCheckBox.setMaximumSize(QtCore.QSize(300, 20))
        self.VulnFoundCheckBox.setObjectName("VulnFoundCheckBox")
        self.horizontalLayout_8.addWidget(self.VulnFoundCheckBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_8)
        self.verticalLayout_76.addLayout(self.verticalLayout_14)
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.AnyDetectionSystemsTriggeredCheckBox = QtWidgets.QCheckBox(self.MeetingsTab)
        self.AnyDetectionSystemsTriggeredCheckBox.setMaximumSize(QtCore.QSize(380, 20))
        self.AnyDetectionSystemsTriggeredCheckBox.setObjectName("AnyDetectionSystemsTriggeredCheckBox")
        self.verticalLayout_18.addWidget(self.AnyDetectionSystemsTriggeredCheckBox)
        self.DocumentTimeCheckBox = QtWidgets.QCheckBox(self.MeetingsTab)
        self.DocumentTimeCheckBox.setMaximumSize(QtCore.QSize(365, 20))
        self.DocumentTimeCheckBox.setObjectName("DocumentTimeCheckBox")
        self.verticalLayout_18.addWidget(self.DocumentTimeCheckBox)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.DocumentTimeInfoBox = QtWidgets.QTextEdit(self.MeetingsTab)
        self.DocumentTimeInfoBox.setMaximumSize(QtCore.QSize(400, 40))
        self.DocumentTimeInfoBox.setReadOnly(True)
        self.DocumentTimeInfoBox.setObjectName("DocumentTimeInfoBox")
        self.verticalLayout_12.addWidget(self.DocumentTimeInfoBox)
        spacerItem35 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_12.addItem(spacerItem35)
        self.verticalLayout_18.addLayout(self.verticalLayout_12)
        self.verticalLayout_76.addLayout(self.verticalLayout_18)
        self.horizontalLayout_99.addLayout(self.verticalLayout_76)
        spacerItem36 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_99.addItem(spacerItem36)
        self.verticalLayout_77.addLayout(self.horizontalLayout_99)
        self.RulesofEngagementTABS.addTab(self.MeetingsTab, "")
        self.gridLayout_20.addWidget(self.RulesofEngagementTABS, 0, 1, 1, 1)
        spacerItem37 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_20.addItem(spacerItem37, 1, 1, 1, 1)
        self.AllTabs.addTab(self.RulesofEngagement, "")
        self.InformationOverviewTAB = QtWidgets.QWidget()
        self.InformationOverviewTAB.setObjectName("InformationOverviewTAB")
        self.gridLayout_24 = QtWidgets.QGridLayout(self.InformationOverviewTAB)
        self.gridLayout_24.setObjectName("gridLayout_24")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.InformationOverviewTAB)
        self.label.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Eras Bold ITC")
        font.setPointSize(28)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.OverviewDatabaseLBL = QtWidgets.QLabel(self.InformationOverviewTAB)
        self.OverviewDatabaseLBL.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Eras Bold ITC")
        font.setPointSize(28)
        self.OverviewDatabaseLBL.setFont(font)
        self.OverviewDatabaseLBL.setObjectName("OverviewDatabaseLBL")
        self.verticalLayout_3.addWidget(self.OverviewDatabaseLBL)
        self.horizontalLayout_19.addLayout(self.verticalLayout_3)
        self.line_4 = QtWidgets.QFrame(self.InformationOverviewTAB)
        self.line_4.setMaximumSize(QtCore.QSize(16777215, 90))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_19.addWidget(self.line_4)
        self.horizontalLayout_21.addLayout(self.horizontalLayout_19)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        spacerItem38 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_20.addItem(spacerItem38)
        self.OverviewDatabaseLoadDBBTN = QtWidgets.QPushButton(self.InformationOverviewTAB)
        self.OverviewDatabaseLoadDBBTN.setMaximumSize(QtCore.QSize(130, 30))
        self.OverviewDatabaseLoadDBBTN.setObjectName("OverviewDatabaseLoadDBBTN")
        self.horizontalLayout_20.addWidget(self.OverviewDatabaseLoadDBBTN)
        self.OverviewDatabaseExpandSelectedEntryBTN = QtWidgets.QPushButton(self.InformationOverviewTAB)
        self.OverviewDatabaseExpandSelectedEntryBTN.setMaximumSize(QtCore.QSize(140, 30))
        self.OverviewDatabaseExpandSelectedEntryBTN.setObjectName("OverviewDatabaseExpandSelectedEntryBTN")
        self.horizontalLayout_20.addWidget(self.OverviewDatabaseExpandSelectedEntryBTN)
        self.verticalLayout_16.addLayout(self.horizontalLayout_20)
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.OverviewDatabaseSearchLBL = QtWidgets.QLabel(self.InformationOverviewTAB)
        self.OverviewDatabaseSearchLBL.setMaximumSize(QtCore.QSize(70, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.OverviewDatabaseSearchLBL.setFont(font)
        self.OverviewDatabaseSearchLBL.setObjectName("OverviewDatabaseSearchLBL")
        self.horizontalLayout_18.addWidget(self.OverviewDatabaseSearchLBL)
        self.OverviewDatabaseSearchLineEdit = QtWidgets.QLineEdit(self.InformationOverviewTAB)
        self.OverviewDatabaseSearchLineEdit.setMinimumSize(QtCore.QSize(260, 25))
        self.OverviewDatabaseSearchLineEdit.setMaximumSize(QtCore.QSize(300, 25))
        self.OverviewDatabaseSearchLineEdit.setObjectName("OverviewDatabaseSearchLineEdit")
        self.horizontalLayout_18.addWidget(self.OverviewDatabaseSearchLineEdit)
        self.OverviewDatabaseSearchBTN = QtWidgets.QPushButton(self.InformationOverviewTAB)
        self.OverviewDatabaseSearchBTN.setMaximumSize(QtCore.QSize(50, 16777215))
        self.OverviewDatabaseSearchBTN.setObjectName("OverviewDatabaseSearchBTN")
        self.horizontalLayout_18.addWidget(self.OverviewDatabaseSearchBTN)
        self.verticalLayout_16.addLayout(self.horizontalLayout_18)
        self.horizontalLayout_21.addLayout(self.verticalLayout_16)
        self.gridLayout_24.addLayout(self.horizontalLayout_21, 0, 0, 1, 1)
        self.line_3 = QtWidgets.QFrame(self.InformationOverviewTAB)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.gridLayout_24.addWidget(self.line_3, 1, 0, 1, 1)
        self.frame = QtWidgets.QFrame(self.InformationOverviewTAB)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame.setObjectName("frame")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.OverviewDatabaseTable = QtWidgets.QTableWidget(self.frame)
        self.OverviewDatabaseTable.setObjectName("OverviewDatabaseTable")
        self.OverviewDatabaseTable.setColumnCount(3)
        self.OverviewDatabaseTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.OverviewDatabaseTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.OverviewDatabaseTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.OverviewDatabaseTable.setHorizontalHeaderItem(2, item)
        self.gridLayout_9.addWidget(self.OverviewDatabaseTable, 0, 0, 1, 1)
        self.OverviewDatabaseTotalTestsLBL = QtWidgets.QLabel(self.frame)
        self.OverviewDatabaseTotalTestsLBL.setObjectName("OverviewDatabaseTotalTestsLBL")
        self.gridLayout_9.addWidget(self.OverviewDatabaseTotalTestsLBL, 1, 0, 1, 1)
        self.gridLayout_24.addWidget(self.frame, 2, 0, 1, 1)
        self.AllTabs.addTab(self.InformationOverviewTAB, "")
        self.verticalLayout_67.addWidget(self.AllTabs)
        Proofo.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(Proofo)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 700, 21))
        self.menuBar.setObjectName("menuBar")
        self.menuHelp = QtWidgets.QMenu(self.menuBar)
        self.menuHelp.setObjectName("menuHelp")
        Proofo.setMenuBar(self.menuBar)
        self.actionUser_Manual = QtWidgets.QAction(Proofo)
        self.actionUser_Manual.setObjectName("actionUser_Manual")
        self.menuHelp.addAction(self.actionUser_Manual)
        self.menuBar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(Proofo)
        self.AllTabs.setCurrentIndex(1)
        self.InformationTab.setCurrentIndex(0)
        self.FindingsTabWidget.setCurrentIndex(0)
        self.RulesofEngagementTABS.setCurrentIndex(1)
        self.TestIDLineEdit.textChanged['QString'].connect(self.CVETestIDLineEdit.setText)
        self.TestIDLineEdit.textChanged['QString'].connect(self.SummaryTestIDLineEdit.setText)
        QtCore.QMetaObject.connectSlotsByName(Proofo)
        Proofo.setTabOrder(self.InformationTab, self.TestIDLineEdit)
        Proofo.setTabOrder(self.TestIDLineEdit, self.TestNameLineEdit)
        Proofo.setTabOrder(self.TestNameLineEdit, self.TestDescriptionLineEdit)
        Proofo.setTabOrder(self.TestDescriptionLineEdit, self.ReportTitleBox_2)
        Proofo.setTabOrder(self.ReportTitleBox_2, self.AssessmentTypeBox_2)
        Proofo.setTabOrder(self.AssessmentTypeBox_2, self.ScoringTypeBox_2)
        Proofo.setTabOrder(self.ScoringTypeBox_2, self.FullCompNameBox_2)
        Proofo.setTabOrder(self.FullCompNameBox_2, self.ShortCompNameBox_2)
        Proofo.setTabOrder(self.ShortCompNameBox_2, self.ContactTitleBox_2)
        Proofo.setTabOrder(self.ContactTitleBox_2, self.ContactNameBox_2)
        Proofo.setTabOrder(self.ContactNameBox_2, self.ContactTelephoneBox)
        Proofo.setTabOrder(self.ContactTelephoneBox, self.ContactEmailBox_2)
        Proofo.setTabOrder(self.ContactEmailBox_2, self.CompWebsiteBox_2)
        Proofo.setTabOrder(self.CompWebsiteBox_2, self.CompAddressBox_2)
        Proofo.setTabOrder(self.CompAddressBox_2, self.CompCityBox_2)
        Proofo.setTabOrder(self.CompCityBox_2, self.StateBox_2)
        Proofo.setTabOrder(self.StateBox_2, self.CompPostCodeBox_2)
        Proofo.setTabOrder(self.CompPostCodeBox_2, self.ConsultantCompanyNameBox)
        Proofo.setTabOrder(self.ConsultantCompanyNameBox, self.ConsultantTitleBox)
        Proofo.setTabOrder(self.ConsultantTitleBox, self.ConsultantNameBox)
        Proofo.setTabOrder(self.ConsultantNameBox, self.ConsultantTelephoneBox)
        Proofo.setTabOrder(self.ConsultantTelephoneBox, self.ConsultantEmailBox)
        Proofo.setTabOrder(self.ConsultantEmailBox, self.ConsultantBusinessAddressBox)
        Proofo.setTabOrder(self.ConsultantBusinessAddressBox, self.ConsultantCityBox)
        Proofo.setTabOrder(self.ConsultantCityBox, self.ConsultantWebsiteBox)
        Proofo.setTabOrder(self.ConsultantWebsiteBox, self.ExecutiveSummaryTextEdit)
        Proofo.setTabOrder(self.ExecutiveSummaryTextEdit, self.ScopeTextEdit)
        Proofo.setTabOrder(self.ScopeTextEdit, self.ProjectObjectivesTextEdit)
        Proofo.setTabOrder(self.ProjectObjectivesTextEdit, self.AssumptionTextEdit)
        Proofo.setTabOrder(self.AssumptionTextEdit, self.SummaryofRecommendationTextEdit)
        Proofo.setTabOrder(self.SummaryofRecommendationTextEdit, self.MethodologyTextEdit)
        Proofo.setTabOrder(self.MethodologyTextEdit, self.URLEnterBox)
        Proofo.setTabOrder(self.URLEnterBox, self.CVEName)
        Proofo.setTabOrder(self.CVEName, self.CVSS)
        Proofo.setTabOrder(self.CVSS, self.CVEDate)
        Proofo.setTabOrder(self.CVEDate, self.CVECriticality)
        Proofo.setTabOrder(self.CVECriticality, self.CVEDescription)
        Proofo.setTabOrder(self.CVEDescription, self.CVERemediation)
        Proofo.setTabOrder(self.CVERemediation, self.AllOptions)
        Proofo.setTabOrder(self.AllOptions, self.ExtractCVEButton)
        Proofo.setTabOrder(self.ExtractCVEButton, self.Save2DatabaseBTN)
        Proofo.setTabOrder(self.Save2DatabaseBTN, self.CVENameTextEdit)
        Proofo.setTabOrder(self.CVENameTextEdit, self.CVSSTextEdit)
        Proofo.setTabOrder(self.CVSSTextEdit, self.CVEDateTextEdit)
        Proofo.setTabOrder(self.CVEDateTextEdit, self.CVECriticalRatingTextEdit)
        Proofo.setTabOrder(self.CVECriticalRatingTextEdit, self.CVEDescriptionTextEdit)
        Proofo.setTabOrder(self.CVEDescriptionTextEdit, self.CVERemediationTextEdit)
        Proofo.setTabOrder(self.CVERemediationTextEdit, self.ClearContent)
        Proofo.setTabOrder(self.ClearContent, self.searchbarLineEdit)
        Proofo.setTabOrder(self.searchbarLineEdit, self.NameYourFindingTextEdit)
        Proofo.setTabOrder(self.NameYourFindingTextEdit, self.NewFindingCriticalityTextEdit)
        Proofo.setTabOrder(self.NewFindingCriticalityTextEdit, self.NewFindingDescriptionTextEdit)
        Proofo.setTabOrder(self.NewFindingDescriptionTextEdit, self.NewfindingTypeTextEdit)
        Proofo.setTabOrder(self.NewfindingTypeTextEdit, self.NewFindingRemediationTextEdit)
        Proofo.setTabOrder(self.NewFindingRemediationTextEdit, self.SaveNewFindingButton)
        Proofo.setTabOrder(self.SaveNewFindingButton, self.ClearContentButton)
        Proofo.setTabOrder(self.ClearContentButton, self.TypeTestingComboBox)
        Proofo.setTabOrder(self.TypeTestingComboBox, self.ScopeTestingTextBox)
        Proofo.setTabOrder(self.ScopeTestingTextBox, self.AnnouncedorUnAnnouncedComboBox)
        Proofo.setTabOrder(self.AnnouncedorUnAnnouncedComboBox, self.ClientInformedDateTestCheckBoxANNOUNCED)
        Proofo.setTabOrder(self.ClientInformedDateTestCheckBoxANNOUNCED, self.ClientInformedSourceIPTestCheckBoxANNOUNCED)
        Proofo.setTabOrder(self.ClientInformedSourceIPTestCheckBoxANNOUNCED, self.DiscussIfTestBlockedCheckBoxUNANNOUNCED)
        Proofo.setTabOrder(self.DiscussIfTestBlockedCheckBoxUNANNOUNCED, self.TestEndsThereCheckBoxUNANNOUNCED)
        Proofo.setTabOrder(self.TestEndsThereCheckBoxUNANNOUNCED, self.ContinueTestingCheckBoxUNANNOUNCED)
        Proofo.setTabOrder(self.ContinueTestingCheckBoxUNANNOUNCED, self.OptionsDependonAimInfoBoxUNANNOUNCED)
        Proofo.setTabOrder(self.OptionsDependonAimInfoBoxUNANNOUNCED, self.EscalationMatrixCheckBoxUNANNOUNCED)
        Proofo.setTabOrder(self.EscalationMatrixCheckBoxUNANNOUNCED, self.WebAppPenTestInfoBox)
        Proofo.setTabOrder(self.WebAppPenTestInfoBox, self.SensitiveDataInfoBox)
        Proofo.setTabOrder(self.SensitiveDataInfoBox, self.SecureStorageCheckBox)
        Proofo.setTabOrder(self.SecureStorageCheckBox, self.DataPrivacyLawsComplianceCheckBox)
        Proofo.setTabOrder(self.DataPrivacyLawsComplianceCheckBox, self.CommunicationCheckBox)
        Proofo.setTabOrder(self.CommunicationCheckBox, self.FullDiskEncryptionCheckBox)
        Proofo.setTabOrder(self.FullDiskEncryptionCheckBox, self.EncryptingReportsCheckBox)
        Proofo.setTabOrder(self.EncryptingReportsCheckBox, self.ScheduledMeetingsCheckBox)
        Proofo.setTabOrder(self.ScheduledMeetingsCheckBox, self.RoutineStatusCheckBox)
        Proofo.setTabOrder(self.RoutineStatusCheckBox, self.PresentFindingstoClientCheckBox)
        Proofo.setTabOrder(self.PresentFindingstoClientCheckBox, self.VulnFoundCheckBox)
        Proofo.setTabOrder(self.VulnFoundCheckBox, self.AnyDetectionSystemsTriggeredCheckBox)
        Proofo.setTabOrder(self.AnyDetectionSystemsTriggeredCheckBox, self.DocumentTimeCheckBox)
        Proofo.setTabOrder(self.DocumentTimeCheckBox, self.DocumentTimeInfoBox)
        Proofo.setTabOrder(self.DocumentTimeInfoBox, self.OverviewDatabaseSearchLineEdit)
        Proofo.setTabOrder(self.OverviewDatabaseSearchLineEdit, self.OverviewDatabaseSearchBTN)
        Proofo.setTabOrder(self.OverviewDatabaseSearchBTN, self.SearchDBBTN)
        Proofo.setTabOrder(self.SearchDBBTN, self.RulesofEngagementTABS)
        Proofo.setTabOrder(self.RulesofEngagementTABS, self.OverviewDatabaseTable)
        Proofo.setTabOrder(self.OverviewDatabaseTable, self.OverviewDatabaseLoadDBBTN)
        Proofo.setTabOrder(self.OverviewDatabaseLoadDBBTN, self.OverviewDatabaseExpandSelectedEntryBTN)
        Proofo.setTabOrder(self.OverviewDatabaseExpandSelectedEntryBTN, self.LoadDatabaseBTN)
        Proofo.setTabOrder(self.LoadDatabaseBTN, self.DatabaseTable)
        Proofo.setTabOrder(self.DatabaseTable, self.SummaryTestIDLineEdit)
        Proofo.setTabOrder(self.SummaryTestIDLineEdit, self.AllTabs)
        Proofo.setTabOrder(self.AllTabs, self.ShowFindingDetailsBTN)
        Proofo.setTabOrder(self.ShowFindingDetailsBTN, self.CVETestIDLineEdit)
        Proofo.setTabOrder(self.CVETestIDLineEdit, self.textBrowser)
        Proofo.setTabOrder(self.textBrowser, self.FindingsTabWidget)
        Proofo.setTabOrder(self.FindingsTabWidget, self.ClearContentInformation)
        Proofo.setTabOrder(self.ClearContentInformation, self.AddtoDatabaseSummaryBTN)
        Proofo.setTabOrder(self.AddtoDatabaseSummaryBTN, self.SubmitInformationBox_2)

        """Menu Tab """
        #connecting the url to the click of the menu button
        self.actionUser_Manual.triggered.connect(self.user_manual)

        """Information Section"""
        #Clear Information Tab content Button
        self.ClearContentInformation.clicked.connect(self.clearInformationTab)
        #add to database button from Information Tab
        self.SubmitInformationBox_2.clicked.connect(self.InsertReportInformationIntoDB)

        """Summaries Section """
        #add to database button for summaries information
        self.AddtoDatabaseSummaryBTN.clicked.connect(self.Submitting_Summaries_Database)
        self.AddRowBTN.clicked.connect(self.add_row_finding_summary)
        self.AddtoDatabaseSummaryBTN.clicked.connect(self.submitting_finding_summary)

        
        """ CVE Section"""
        #Scrap the URL for the elements
        self.ExtractCVEButton.clicked.connect(self.ScrapWeb)
        #Selecting All CheckBoxes
        self.AllOptions.stateChanged.connect(self.onStateChangePrincipal)
        self.AllCheckboxes = [self.CVEName, self.CVSS, self.CVEDate, self.CVECriticality, self.CVEDescription, self.CVERemediation]
        for checkbox in self.AllCheckboxes:
            checkbox.stateChanged.connect(self.onStateChange)           
        #Clear Content Button for CVE
        self.ClearContent.clicked.connect(self.clearcontent)
        #Add CVE Fields to Overview Database
        self.Save2DatabaseBTN.clicked.connect(self.CVE_Database_Table)
        
        """ Findings Section """
        #make search button disabled >  Findings Database
        self.SearchDBBTN.setEnabled(False)
        self.searchbarLineEdit.textChanged.connect(self.disabledButton)
        #search button
        self.SearchDBBTN.clicked.connect(self.handleButton)
        #Clear New Findings Button
        self.ClearContentButton.clicked.connect(self.clearcontentfindings)
        #Add New Finding Button
        self.SaveNewFindingButton.clicked.connect(self.InsertFindingsData)
        #Load Database Findings Tab
        self.LoadDatabaseBTN.clicked.connect(self.Load_DBname_Findings)
        #when clicked in cell, select all row instead (Findings Database)
        self.on_selection_changed()
        self.DatabaseTable.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.DatabaseTable.selectionModel().selectionChanged.connect(self.on_selection_changed)
        #open expanded entry window
        self.ShowFindingDetailsBTN.clicked.connect(self.Open_Selected_Finding)

        """Rules of Engagement """
        #setting "Select Option" as the first index
        self.AnnouncedorUnAnnouncedComboBox.setCurrentIndex(0)
        self.TypeTestingComboBox.setCurrentIndex(0)
        #combo box signal -> client IT section
        self.AnnouncedorUnAnnouncedComboBox.currentIndexChanged.connect(self.select_combo_option)
        #combo box signal -> type and scope section
        self.TypeTestingComboBox.currentIndexChanged.connect(self.Type_and_Scope)
        
        """ Main Overview Database Section"""
         #make search button disabled >  Overview Database
        self.OverviewDatabaseSearchBTN.setEnabled(False)
        self.OverviewDatabaseSearchLineEdit.textChanged.connect(self.disabledMainDatabaseButton)
        #search button Main Database
        self.OverviewDatabaseSearchBTN.clicked.connect(self.handleSearchButton)        
        #load main overview database Button
        self.OverviewDatabaseLoadDBBTN.clicked.connect(self.Load_InformationTab_MainDatabase)
        #when clicked in cell, select all row instead (MainDatabase)
        self.on_selection_changed_MainDatabase()
        self.OverviewDatabaseTable.setSelectionBehavior(QtWidgets.QTableWidget.SelectRows)
        self.OverviewDatabaseTable.selectionModel().selectionChanged.connect(self.on_selection_changed_MainDatabase)
        #open expanded entry window
        self.OverviewDatabaseExpandSelectedEntryBTN.clicked.connect(self.Open_Selected_Entry_Window)
        
    def retranslateUi(self, Proofo):
        _translate = QtCore.QCoreApplication.translate
        Proofo.setWindowTitle(_translate("Proofo", "Proofo"))
        self.centralwidget.setToolTip(_translate("Proofo", "<html><head/><body><p><br/></p></body></html>"))
        self.ProofoLBL.setText(_translate("Proofo", "Proofo"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.LoginPageTAB), _translate("Proofo", "Proofo"))
        self.ClearContentInformation.setText(_translate("Proofo", "Clear Content"))
        self.SubmitInformationBox_2.setText(_translate("Proofo", "Add to Database"))
        self.textBrowser.setHtml(_translate("Proofo", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Note:</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Test ID, Test Name, Test Description are all fields in which you will identify this particular test under the &quot;<span style=\" font-weight:600;\">Information</span><span style=\" font-weight:600; font-style:italic;\"> </span><span style=\" font-weight:600;\">Overview</span>&quot; tab</p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">* <span style=\" text-decoration: underline;\">IT WILL NOT BE ADDED TO THE REPORT </span></p></body></html>"))
        self.TestIDLBL.setText(_translate("Proofo", "Test ID"))
        self.TestNameLBL.setText(_translate("Proofo", "Test Name"))
        self.TestDescriptionLBL.setText(_translate("Proofo", "Test Description"))
        self.ReportTitleLBL_2.setText(_translate("Proofo", "Report Title"))
        self.AssessmentTypeLBL_2.setText(_translate("Proofo", "Assessment Type"))
        self.ScoringTypeLBL_2.setText(_translate("Proofo", "Scoring Type"))
        self.FullCompNameLBL_2.setText(_translate("Proofo", "Full Company Name"))
        self.ShortCompNameLBL_2.setText(_translate("Proofo", "Short Company Name"))
        self.InformationTab.setTabText(self.InformationTab.indexOf(self.ReportTAB), _translate("Proofo", "Report"))
        self.ContactTitleLBL_2.setText(_translate("Proofo", "Contact Title"))
        self.ContactNameLBL_2.setText(_translate("Proofo", "Contact Name"))
        self.ContactTelephoneLBL.setText(_translate("Proofo", "Contact Telephone"))
        self.ContactEmailLBL_2.setText(_translate("Proofo", "Contact Email Address"))
        self.CompWebsiteLBL_2.setText(_translate("Proofo", "Company Website"))
        self.CompAddressLBL_2.setText(_translate("Proofo", "Company Address"))
        self.CompCityLBL_2.setText(_translate("Proofo", "Company City"))
        self.StateLBL_2.setText(_translate("Proofo", "State"))
        self.CompPostCodeLBL_2.setText(_translate("Proofo", "Company Post Code"))
        self.InformationTab.setTabText(self.InformationTab.indexOf(self.ContactCompanyTAB), _translate("Proofo", "Contact & Company"))
        self.ConsultantCompanyNameLBL.setText(_translate("Proofo", "Company Name: "))
        self.ConsultantTitleLBL.setText(_translate("Proofo", "Title:"))
        self.ConsultantContactNameLBL.setText(_translate("Proofo", "Tester Name:"))
        self.ConsultantTelephoneLBL.setText(_translate("Proofo", "Telephone:"))
        self.ConsultantEmailLBL.setText(_translate("Proofo", "E-mail:"))
        self.ConsultantAddressLBL.setText(_translate("Proofo", "Business Address:"))
        self.ConsultantCityLBL.setText(_translate("Proofo", "City:"))
        self.ConsultantWebsiteLBL.setText(_translate("Proofo", "Website:"))
        self.InformationTab.setTabText(self.InformationTab.indexOf(self.TesterTAB), _translate("Proofo", "Tester"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.Information), _translate("Proofo", "Information"))
        self.SummaryTestIDLBL.setText(_translate("Proofo", "Test ID:"))
        self.ExecutiveSummaryLBL.setText(_translate("Proofo", "Executive Summary:"))
        self.ScopeLBL.setText(_translate("Proofo", "Scope:"))
        self.ProjectObjectivesLBL.setText(_translate("Proofo", "Project Objectives:"))
        self.AssumptionsLBL.setText(_translate("Proofo", "Assumption\'s"))
        self.SummaryofFindingsLBL.setText(_translate("Proofo", "Summary of Findings:"))
        item = self.SummaryFindingTable_Window.verticalHeaderItem(0)
        item.setText(_translate("Proofo", "1"))
        item = self.SummaryFindingTable_Window.horizontalHeaderItem(0)
        item.setText(_translate("Proofo", "ID"))
        item = self.SummaryFindingTable_Window.horizontalHeaderItem(1)
        item.setText(_translate("Proofo", "Description"))
        item = self.SummaryFindingTable_Window.horizontalHeaderItem(2)
        item.setText(_translate("Proofo", "Risk"))
        self.AddRowBTN.setText(_translate("Proofo", "Add Row"))
        self.SummaryofRecommendationLBL.setText(_translate("Proofo", "Summary of Recommendations:"))
        self.MethodologyLBL.setText(_translate("Proofo", "Methodology"))
        self.AddtoDatabaseSummaryBTN.setText(_translate("Proofo", "Add to Database"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.SummariesTAB), _translate("Proofo", "Report Summaries"))
        self.CVETestIDLBL.setText(_translate("Proofo", "Test ID:"))
        self.SelectOption.setText(_translate("Proofo", "[2] Select an Option:"))
        self.CVEName.setText(_translate("Proofo", "CVE Name"))
        self.CVSS.setText(_translate("Proofo", "CVSS"))
        self.CVEDate.setText(_translate("Proofo", "CVE Date"))
        self.CVECriticality.setText(_translate("Proofo", "CVE Critical Rating"))
        self.CVEDescription.setText(_translate("Proofo", "CVE Description"))
        self.CVERemediation.setText(_translate("Proofo", "CVE Remediation"))
        self.AllOptions.setText(_translate("Proofo", "All of the above"))
        self.ExtractCVEButton.setText(_translate("Proofo", "Extract"))
        self.Save2DatabaseBTN.setText(_translate("Proofo", "Add to Database"))
        self.ClearContent.setText(_translate("Proofo", "Clear Content"))
        self.InputURL.setText(_translate("Proofo", "[1] Input the CVE URL here:"))
        self.DisplayLBL.setText(_translate("Proofo", "Display:"))
        self.CVENameLBLDisplay.setText(_translate("Proofo", "CVE Name:"))
        self.CVSSLBLDisplay.setText(_translate("Proofo", "CVSS:"))
        self.CVEDateLBLDisplay.setText(_translate("Proofo", "CVE Date:"))
        self.CVECriticalRatingLBLDisplay.setText(_translate("Proofo", "CVE Critical Rating:"))
        self.CVEDescriptionLBLDisplay.setText(_translate("Proofo", "CVE Description:"))
        self.CVERemediationLBLDisplay.setText(_translate("Proofo", "CVE Remediation"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.CVE), _translate("Proofo", "CVE"))
        self.DatabaseLogoLBL.setText(_translate("Proofo", "DataBase"))
        self.LoadDatabaseBTN.setText(_translate("Proofo", "Load Database"))
        self.ShowFindingDetailsBTN.setText(_translate("Proofo", "Show Finding Details"))
        self.DatabaseSearchLogoLBL.setText(_translate("Proofo", "Search:"))
        self.SearchDBBTN.setText(_translate("Proofo", "Search"))
        item = self.DatabaseTable.horizontalHeaderItem(0)
        item.setText(_translate("Proofo", "Name"))
        item = self.DatabaseTable.horizontalHeaderItem(1)
        item.setText(_translate("Proofo", "Criticality"))
        item = self.DatabaseTable.horizontalHeaderItem(2)
        item.setText(_translate("Proofo", "Type"))
        item = self.DatabaseTable.horizontalHeaderItem(3)
        item.setText(_translate("Proofo", "Description"))
        item = self.DatabaseTable.horizontalHeaderItem(4)
        item.setText(_translate("Proofo", "Remediation"))
        self.TotalUsersLBL.setText(_translate("Proofo", "Total Findings:"))
        self.FindingsTabWidget.setTabText(self.FindingsTabWidget.indexOf(self.FindingsTab), _translate("Proofo", "Findings"))
        self.SaveNewFindingButton.setText(_translate("Proofo", "Add to Database"))
        self.ClearContentButton.setText(_translate("Proofo", "Clear Content"))
        self.NewFindingRemediationLBL.setText(_translate("Proofo", "New finding remediation:"))
        self.NameYourFindingLBL.setText(_translate("Proofo", "Name your finding:"))
        self.NewFindingDescriptionLBL.setText(_translate("Proofo", "New finding description:"))
        self.NewfindingTypeLBL.setText(_translate("Proofo", "New finding type:"))
        self.NewFindingCriticalityLBL.setText(_translate("Proofo", "New finding criticality:"))
        self.FindingsTabWidget.setTabText(self.FindingsTabWidget.indexOf(self.AddNewFindingTab), _translate("Proofo", "Add New Findings"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.Findings), _translate("Proofo", "Findings"))
        self.TypeTestingLBL.setText(_translate("Proofo", "Type of Testing:"))
        self.TypeTestingComboBox.setItemText(0, _translate("Proofo", "Select one:"))
        self.TypeTestingComboBox.setItemText(1, _translate("Proofo", "White Box"))
        self.TypeTestingComboBox.setItemText(2, _translate("Proofo", "Black Box"))
        self.TypeTestingComboBox.setItemText(3, _translate("Proofo", "Gray Box"))
        self.DescriptionTestingLBL.setText(_translate("Proofo", "Description of Testing:"))
        self.RulesofEngagementTABS.setTabText(self.RulesofEngagementTABS.indexOf(self.TypenScopeTAB), _translate("Proofo", "Type and Scope"))
        self.TypeofTestLBL.setText(_translate("Proofo", "Are the testings Announced or Unannounced?"))
        self.AnnouncedorUnAnnouncedComboBox.setItemText(0, _translate("Proofo", "Select one:"))
        self.AnnouncedorUnAnnouncedComboBox.setItemText(1, _translate("Proofo", "Announced"))
        self.AnnouncedorUnAnnouncedComboBox.setItemText(2, _translate("Proofo", "Unannounced"))
        self.ClientInformedDateTestCheckBoxANNOUNCED.setText(_translate("Proofo", "Client is informed of the time and date of the test"))
        self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setText(_translate("Proofo", "Client is informed of the source IP addresses from where the testing will be done"))
        self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setText(_translate("Proofo", "Discuss with client what will happen if test is blocked by their defenses"))
        self.TestEndsThereCheckBoxUNANNOUNCED.setText(_translate("Proofo", "Test ends here"))
        self.ContinueTestingCheckBoxUNANNOUNCED.setText(_translate("Proofo", "Continue with Testing"))
        self.OptionsDependonAimInfoBoxUNANNOUNCED.setHtml(_translate("Proofo", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">These options will depends on the aim of the test. Is it to test the security of the clients infrastructure or the response of their IT team?</p></body></html>"))
        self.EscalationMatrixCheckBoxUNANNOUNCED.setText(_translate("Proofo", "Someone in the escalation Matrix knows about the time and date of the test"))
        self.NoteLBL.setText(_translate("Proofo", "Note:"))
        self.WebAppPenTestInfoBox.setHtml(_translate("Proofo", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Web Application Penetration Tests are usually announced.</p></body></html>"))
        self.RulesofEngagementTABS.setTabText(self.RulesofEngagementTABS.indexOf(self.ClientITteamTAB), _translate("Proofo", "Client IT Team"))
        self.SensitiveDataInfoBox.setHtml(_translate("Proofo", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">At the test preparation and execution, the personnel performing the penetration test will be provided with sensitive information. The personnel could also come in contact with sensitive information during the test.</p></body></html>"))
        self.CriteriasLBL.setText(_translate("Proofo", "Make sure the following are met for sensitive data"))
        self.SecureStorageCheckBox.setText(_translate("Proofo", "Sensitive data has a secure and enough storage"))
        self.DataPrivacyLawsComplianceCheckBox.setText(_translate("Proofo", "Be compliant with Data Privacy Laws (i.e., GDPR)"))
        self.CommunicationCheckBox.setText(_translate("Proofo", "Communication measures should be taken"))
        self.FullDiskEncryptionCheckBox.setText(_translate("Proofo", "Full Disk Encryption on the testers computer"))
        self.EncryptingReportsCheckBox.setText(_translate("Proofo", "Encrypting Reports sent by email or via other means"))
        self.RulesofEngagementTABS.setTabText(self.RulesofEngagementTABS.indexOf(self.SensitiveDataTab), _translate("Proofo", "Sensitive Data"))
        self.StatusMeetingnReportLBL.setText(_translate("Proofo", "Status Meeting and Reports"))
        self.ScheduledMeetingsCheckBox.setText(_translate("Proofo", "Have scheduled regular meetings  between the testing team and client"))
        self.RoutineStatusCheckBox.setText(_translate("Proofo", "Have Routine Status Reports issued by the testing team"))
        self.PresentFindingstoClientCheckBox.setText(_translate("Proofo", "Present to client how far the testing team have reached"))
        self.VulnFoundCheckBox.setText(_translate("Proofo", "What vulnerabilities have been found up to that point"))
        self.AnyDetectionSystemsTriggeredCheckBox.setText(_translate("Proofo", "Ask client to confirm if any internal detection systems have been triggered"))
        self.DocumentTimeCheckBox.setText(_translate("Proofo", "Testing team should document the time when the test was performed"))
        self.DocumentTimeInfoBox.setHtml(_translate("Proofo", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This will help the clients internal security team correlate the logs with the penetration tests performed.</p></body></html>"))
        self.RulesofEngagementTABS.setTabText(self.RulesofEngagementTABS.indexOf(self.MeetingsTab), _translate("Proofo", "Meetings"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.RulesofEngagement), _translate("Proofo", "Rules of Engagement"))
        self.label.setText(_translate("Proofo", "Database"))
        self.OverviewDatabaseLBL.setText(_translate("Proofo", "Overview"))
        self.OverviewDatabaseLoadDBBTN.setText(_translate("Proofo", "Load Database"))
        self.OverviewDatabaseExpandSelectedEntryBTN.setText(_translate("Proofo", "Expand Selected Entry"))
        self.OverviewDatabaseSearchLBL.setText(_translate("Proofo", "Search:"))
        self.OverviewDatabaseSearchBTN.setText(_translate("Proofo", "Search"))
        item = self.OverviewDatabaseTable.horizontalHeaderItem(0)
        item.setText(_translate("Proofo", "Test_ID"))
        item = self.OverviewDatabaseTable.horizontalHeaderItem(1)
        item.setText(_translate("Proofo", "Test Name"))
        item = self.OverviewDatabaseTable.horizontalHeaderItem(2)
        item.setText(_translate("Proofo", "Test Description"))
        self.OverviewDatabaseTotalTestsLBL.setText(_translate("Proofo", "Total Tests:"))
        self.AllTabs.setTabText(self.AllTabs.indexOf(self.InformationOverviewTAB), _translate("Proofo", "Information Overview"))
        self.menuHelp.setTitle(_translate("Proofo", "Help"))
        self.actionUser_Manual.setText(_translate("Proofo", "User Manual"))
        self.actionUser_Manual.setStatusTip(_translate("Proofo", "Open User Guide"))
        self.actionUser_Manual.setShortcut(_translate("Proofo", "Ctrl+H"))
    #opening up the user manual on the menu bar
    def user_manual(self):
        user_manual_link =  QtCore.QUrl("https://widesecurity.net/proofo/proofo-manual/")
        if not QtGui.QDesktopServices.openUrl(user_manual_link):
            pass

    #Summary Finding Table adding row button
    def add_row_finding_summary(self):
        rowPosition = self.SummaryFindingTable_Window.rowCount()
        self.SummaryFindingTable_Window.insertRow(rowPosition)

    #making the summary table summary save in the db
    def submitting_finding_summary(self):
        Test_ID_Summary = self.SummaryTestIDLineEdit.text()
        Summary_Findings_Name = [self.SummaryFindingTable_Window.item(row, 0).text() for row in range(self.SummaryFindingTable_Window.rowCount())]
        Summary_Findings_Desc = [self.SummaryFindingTable_Window.item(row, 1).text() for row in range(self.SummaryFindingTable_Window.rowCount())]
        Summary_Findings_Risk = [self.SummaryFindingTable_Window.item(row, 2).text() for row in range(self.SummaryFindingTable_Window.rowCount())]

        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()

        for row in range(len(Summary_Findings_Name)):
            c.execute("CREATE TABLE IF NOT EXISTS Findings_Summaries(Test_ID TEXT, Summary_Findings_Name TEXT, Summary_Findings_Desc TEXT, Summary_Findings_Risk TEXT)")
            c.execute("INSERT INTO Findings_Summaries(Test_ID, Summary_Findings_Name, Summary_Findings_Desc, Summary_Findings_Risk) VALUES (?,?,?,?)", (Test_ID_Summary, Summary_Findings_Name[row], Summary_Findings_Desc[row], Summary_Findings_Risk[row]))
        conn.commit()
        c.close()
        conn.close()

    #Report Summaries
    def Submitting_Summaries_Database(self):
        Test_ID_Summary = self.SummaryTestIDLineEdit.text()
        Executive_Summary = self.ExecutiveSummaryTextEdit.toPlainText()
        Scope = self.ScopeTextEdit.toPlainText()
        Project_Objectives = self.ProjectObjectivesTextEdit.toPlainText()
        Assumptions = self.AssumptionTextEdit.toPlainText()       
        Summary_Recommendations = self.SummaryofRecommendationTextEdit.toPlainText()
        Methodology = self.MethodologyTextEdit.toPlainText()

        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()
        try:
            if (str(self.SummaryTestIDLineEdit.text()) and str(self.ExecutiveSummaryTextEdit.toPlainText()) and str(self.ScopeTextEdit.toPlainText()) and
                str(self.ProjectObjectivesTextEdit.toPlainText()) and str(self.AssumptionTextEdit.toPlainText())
                and str(self.SummaryofRecommendationTextEdit.toPlainText()) and str(self.MethodologyTextEdit.toPlainText())) != "":
                try:
                    c.execute("CREATE TABLE IF NOT EXISTS Summaries(Test_ID TEXT, Executive_Summary TEXT, Scope TEXT, Project_Objectives TEXT, Assumptions TEXT, Summary_Findings TEXT, Summary_Recommendations TEXT, Methodology TEXT)")
                    c.execute("INSERT INTO Summaries(Test_ID, Executive_Summary, Scope, Project_Objectives, Assumptions, Summary_Findings, Summary_Recommendations, Methodology) VALUES(?,?,?,?,?,?,?,?)",
                              (Test_ID_Summary,Executive_Summary,Scope,Project_Objectives,Assumptions,Summary_Findings,Summary_Recommendations,Methodology))
                    conn.commit()
                    InsertedMsg = QMessageBox()
                    InsertedMsg.setWindowTitle("Summaries")
                    InsertedMsg.setText("Information Stored!")
                    InsertedMsg.setIcon(QMessageBox.Information)
                    InsertedMsg.setStandardButtons(QMessageBox.Ok)
                    quitting = InsertedMsg.exec_()                    
                    self.Load_DBname_Findings()
                    c.close()
                    conn.close()
                except:
                        pass
            else:
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Empty Fields")
                        InsertedMsg.setText("Please fill in the fields before attempting to save!")
                        InsertedMsg.setDetailedText("""Test ID is required. If missing, add one in the Information Section. All other fields are required in order to add to database.""")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
        except:       
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Error")
                        InsertedMsg.setText("Unknown Error: Make sure fields are properly filled")
                        InsertedMsg.setDetailedText("""Syntax: TEXT""")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
                        pass      
            
    #cler content from CVE Tab
    def clearcontent(self):
        self.CVENameTextEdit.clear()
        self.CVSSTextEdit.clear()
        self.CVEDateTextEdit.clear()
        self.CVECriticalRatingTextEdit.clear()
        self.CVEDescriptionTextEdit.clear()
        self.CVERemediationTextEdit.clear()
        

    #clear content from new findings Tab
    def clearcontentfindings(self):
        self.NameYourFindingTextEdit.clear()
        self.NewFindingDescriptionTextEdit.clear()
        self.NewFindingRemediationTextEdit.clear()
        self.NewFindingCriticalityTextEdit.clear()
        self.NewfindingTypeTextEdit.clear()

     # clear content from Information Tab   
    def clearInformationTab(self):
        """ Report Tab Variables"""
        self.TestIDLineEdit.clear()
        self.TestNameLineEdit.clear()
        self.TestDescriptionLineEdit.clear()

        self.ReportTitleBox_2.clear()
        RandomTitle = self.TitleBox_2.clear()
        self.AssessmentTypeBox_2.clear()
        self.ScoringTypeBox_2.clear()
        self.FullCompNameBox_2.clear()
        self.ShortCompNameBox_2.clear()

        """ Contact Company Tab"""
        self.ContactTitleBox_2.clear()
        self.ContactNameBox_2.clear()
        self.ContactTelephoneBox.clear()
        self.ContactEmailBox_2.clear()
        self.CompWebsiteBox_2.clear()
        self.CompAddressBox_2.clear()
        self.CompCityBox_2.clear()
        self.StateBox_2.clear()
        self.CompPostCodeBox_2.clear()

        """Consultant Tab """ #I changed from ConsultantTAB to TesterTAB just FYI
        self.ConsultantCompanyNameBox.clear()
        self.ConsultantNameBox.clear()
        self.ConsultantTitleBox.clear()
        self.ConsultantTelephoneBox.clear()
        self.ConsultantEmailBox.clear()
        self.ConsultantBusinessAddressBox.clear()
        self.ConsultantCityBox.clear()
        self.ConsultantWebsiteBox.clear()


    #CVE Tab extracting details from CVE DB        
    def ScrapWeb(self):
        urlbox = self.URLEnterBox.text()
        if '.' in urlbox and ' ' not in urlbox:
            try:
                http = urllib3.PoolManager()
                req = http.request("GET", urlbox)
                if req.status == 200:
                    blob = req.data
                    soup = BeautifulSoup(blob, "html.parser")
                    cve_name = str(soup.find("span",{"data-testid" : "page-header-vuln-id"}))
                    CVSSBreakdown =  soup.find("span",{"data-testid" : "vuln-cvss3-nist-vector"})
                    date =  str(soup.find("span",{"data-testid" : "vuln-published-on"}))
                    criticality =  str(soup.find("a",{"data-testid" : "vuln-cvss3-panel-score"}))
                    descrip = str(soup.find("p",{"data-testid" : "vuln-description"}))
                    remediation = str(soup.find("td", {"data-testid" : "vuln-hyperlinks-link-0"} ))
                    if self.CVEName.isChecked():
                        self.CVENameTextEdit.setText(str(cve_name))
                    if self.CVSS.isChecked():
                        self.CVSSTextEdit.setText(str(CVSSBreakdown))
                    if self.CVEDate.isChecked():
                        self.CVEDateTextEdit.setText(str(date))
                    if self.CVECriticality.isChecked():
                        self.CVECriticalRatingTextEdit.setText(str(criticality))
                    if self.CVEDescription.isChecked():
                        self.CVEDescriptionTextEdit.setText(str(descrip))
                    if self.CVERemediation.isChecked():
                        self.CVERemediationTextEdit.setText(str(remediation))
                    else:
                        pass
            except:
                warning = QMessageBox()
                warning.setWindowTitle("Warning!")
                warning.setText("Please input an URL to extract from!")
                warning.setIcon(QMessageBox.Warning)
                warning.setStandardButtons(QMessageBox.Ok)
                warning.setDetailedText("Visit: https://nvd.nist.gov/vuln/search and search for your CVE to input in the URL Box")
                x = warning.exec_()
                pass
        else:
                warning = QMessageBox()
                warning.setWindowTitle("Warning!")
                warning.setText("Please input an URL to extract from!")
                warning.setIcon(QMessageBox.Warning)
                warning.setStandardButtons(QMessageBox.Ok)
                warning.setDetailedText("Visit: https://nvd.nist.gov/vuln/search and search for your CVE to input in the URL Box")
                x = warning.exec_()
      
    #CheckBoxes
    def onStateChangePrincipal(self, state):
        if state == QtCore.Qt.Checked:
            for checkbox in self.AllCheckboxes:
                checkbox.blockSignals(True)
                checkbox.setCheckState(state)
                checkbox.blockSignals(False)


    def onStateChange(self, state):
        self.AllOptions.blockSignals(True)
        self.AllOptions.setChecked(QtCore.Qt.Unchecked)
        self.AllOptions.blockSignals(False)

    #New Findings Database
    def InsertFindingsData(self):
        name = self.NameYourFindingTextEdit.toPlainText()
        description = self.NewFindingDescriptionTextEdit.toPlainText()
        remediation = self.NewFindingRemediationTextEdit.toPlainText()
        criticality = self.NewFindingCriticalityTextEdit.toPlainText()
        type_finding = self.NewfindingTypeTextEdit.toPlainText()
  
        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()
        try:
            if (str(self.NameYourFindingTextEdit.toPlainText()) and str(self.NewFindingCriticalityTextEdit.toPlainText()) and
                str(self.NewfindingTypeTextEdit.toPlainText()) and str(self.NewFindingDescriptionTextEdit.toPlainText()) and
                str(self.NewFindingRemediationTextEdit.toPlainText())) != "":
                try:
                    c.execute("CREATE TABLE IF NOT EXISTS Findings(Name TEXT, Criticality TEXT, Type TEXT, Description TEXT, Remediation TEXT)")
                    c.execute("INSERT INTO Findings(Name, Criticality, Type, Description, Remediation) VALUES(?,?,?,?,?)", (name,criticality,type_finding,description,remediation))
                    conn.commit()
                    InsertedMsg = QMessageBox()
                    InsertedMsg.setWindowTitle("New Finding")
                    InsertedMsg.setText("Information Stored!")
                    InsertedMsg.setIcon(QMessageBox.Information)
                    InsertedMsg.setStandardButtons(QMessageBox.Ok)
                    quitting = InsertedMsg.exec_()                    
                    self.Load_DBname_Findings()
                    c.close()
                    conn.close()
                except:
                        pass
            else:
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Empty Fields")
                        InsertedMsg.setText("Please fill in the fields before attempting to save!")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
        except:       
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Error")
                        InsertedMsg.setText("Unknown Error: Make sure fields are properly filled")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
                        pass      

    #Load Database of New Findings items to Findings Table (Name)
    def Load_DBname_Findings(self):
        try:
            while self.DatabaseTable.rowCount() > 0:
                self.DatabaseTable.removeRow(0)
            conn = sqlite3.connect('Main_Database.db')
            content = 'SELECT Name, Criticality, Type, Description, Remediation FROM Findings'
            executing_content2 = conn.execute(content)
            
            for  row_index, row_data in enumerate(executing_content2):        
                self.DatabaseTable.insertRow(row_index)
                for colm_index, colm_data in enumerate(row_data):
                    self.DatabaseTable.setItem(row_index, colm_index, QTableWidgetItem(str(colm_data)))
            self.TotalUsersLBL.setText("Total Findings: "+str(self.DatabaseTable.rowCount()))
            conn.close()
            return
        except:
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Load Database")
                        InsertedMsg.setText("Make sure you have a database where the Proofo is located!")
                        InsertedMsg.setDetailedText("If the database is in the same directory as Proofo, then make sure a table exists. If not, start one by adding a new finding!")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
                        
    #Only enabling Search Button if user input text into search bar
    def disabledButton(self):
        if len(self.searchbarLineEdit.text()) > 0:
            self.SearchDBBTN.setEnabled(True)
        else:
            self.SearchDBBTN.setEnabled(False)
            self.LoadDatabaseBTN.click()

            
    #Search Bar in Database
    def handleButton(self):
        columnOfInterest = 0 # or whatever
        searchbar = self.searchbarLineEdit.text()

        for rowIndex in range(self.DatabaseTable.rowCount()):
            twItem = self.DatabaseTable.item(rowIndex, columnOfInterest)

            if twItem.text() == str(searchbar):
                self.DatabaseTable.setRowHidden(rowIndex, False)
            else:
                self.DatabaseTable.setRowHidden(rowIndex, True)



    def on_selection_changed(self):
        self.ShowFindingDetailsBTN.setEnabled(bool(self.DatabaseTable.selectionModel().selectedRows()))

    #Add Information to Overview Database
    def InsertReportInformationIntoDB(self):
        """ Report Tab Variables"""
        TestName = self.TestNameLineEdit.text()
        TestDescription = self.TestDescriptionLineEdit.text()

        ReportTitle = self.ReportTitleBox_2.text()
        AssessmentType = self.AssessmentTypeBox_2.text()
        ScoringType = self.ScoringTypeBox_2.text()
        FullCompanyName = self.FullCompNameBox_2.text()
        ShortCompanyName = self.ShortCompNameBox_2.text()

        """ Contact Company Tab"""
        ContactTitle =self.ContactTitleBox_2.text()
        ContactName =self.ContactNameBox_2.text()
        ContactTelephone =self.ContactTelephoneBox.text()
        ContactEmailAddress =self.ContactEmailBox_2.text()
        ContactWebsite =self.CompWebsiteBox_2.text()
        ContactAddress =self.CompAddressBox_2.text()
        ContactCity =self.CompCityBox_2.text()
        ContactState =self.StateBox_2.text()
        ContactPostCode =self.CompPostCodeBox_2.text()

        """Tester Tab """ 
        TesterCompanyName =self.ConsultantCompanyNameBox.text()
        TesterContactName =self.ConsultantNameBox.text()
        TesterTitle =self.ConsultantTitleBox.text()
        TesterTelephone =self.ConsultantTelephoneBox.text()
        TesterEmail =self.ConsultantEmailBox.text()
        TesterBusinessAddress =self.ConsultantBusinessAddressBox.text()
        TesterCity =self.ConsultantCityBox.text()
        TesterWebsite =self.ConsultantWebsiteBox.text()

        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()
        testID = self.TestIDLineEdit.text()
        c.execute('SELECT Test_ID FROM Test_Details WHERE Test_ID=?', (testID,))
        executing_check = c.fetchone()
        if executing_check:
                    InsertedMsg = QMessageBox()
                    InsertedMsg.setWindowTitle("Duplicate")
                    InsertedMsg.setText("This value already exists within the database. Please input a different one.")
                    InsertedMsg.setIcon(QMessageBox.Warning)
                    InsertedMsg.setStandardButtons(QMessageBox.Ok)
                    quitting = InsertedMsg.exec_()
        else:
            if (str(self.TestIDLineEdit.text())  and
                        str(self.TestNameLineEdit.text()) and
                        str(self.TestDescriptionLineEdit.text()) and
                        str(self.ReportTitleBox_2.text()) and
                        str(self.AssessmentTypeBox_2.text()) and
                        str(self.ScoringTypeBox_2.text()) and
                        str(self.FullCompNameBox_2.text()) and
                        str(self.ShortCompNameBox_2.text()) and
                        str(self.ContactTitleBox_2.text()) and
                        str(self.ContactNameBox_2.text()) and
                        str(self.ContactTelephoneBox.text()) and
                        str(self.ContactEmailBox_2.text()) and
                        str(self.CompWebsiteBox_2.text()) and
                        str(self.CompAddressBox_2.text()) and
                        str(self.CompCityBox_2.text()) and
                        str(self.StateBox_2.text()) and
                        str(self.CompPostCodeBox_2.text()) and
                        str(self.ConsultantCompanyNameBox.text()) and
                        str(self.ConsultantNameBox.text()) and
                        str(self.ConsultantTitleBox.text()) and
                        str(self.ConsultantTelephoneBox.text()) and
                        str(self.ConsultantEmailBox.text()) and
                        str(self.ConsultantBusinessAddressBox.text()) and
                        str(self.ConsultantCityBox.text()) and
                        str(self.ConsultantWebsiteBox.text())) != "":
                try:
                    #TestID Table Creation
                    c.execute("""CREATE TABLE IF NOT EXISTS Test_Details(Test_ID TEXT, Test_Name TEXT, Test_Description TEXT,
                              Report_Title TEXT, Assessment_Type TEXT, Scoring_Type TEXT, Full_Company_Name TEXT, Short_Company_Name TEXT,
                              Contact_Title TEXT, Contact_Name TEXT, Contact_Telephone TEXT,
                                Contact_Email_Address TEXT, Contact_Website TEXT, Contact_Address TEXT, Contact_City TEXT, Contact_State TEXT,
                                Contact_Post_Code TEXT , Tester_Company TEXT, Tester_Title TEXT, Tester_Name TEXT, Tester_Telephone TEXT,
                                Tester_Email TEXT, Tester_Business_Address TEXT, Tester_City TEXT, Tester_Website TEXT)""")

                    #TestID Table Info Inserted
                    c.execute("""INSERT INTO Test_Details(Test_ID, Test_Name, Test_Description, Report_Title, Assessment_Type, Scoring_Type, Full_Company_Name,
                                            Short_Company_Name, Contact_Title, Contact_Name, Contact_Telephone, Contact_Email_Address, Contact_Website,
                                        Contact_Address, Contact_City, Contact_State, Contact_Post_Code,Tester_Company, Tester_Title, Tester_Name, Tester_Telephone,
                              Tester_Email, Tester_Business_Address, Tester_City, Tester_Website ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""",
                              (testID, TestName, TestDescription, ReportTitle, AssessmentType, ScoringType, FullCompanyName, ShortCompanyName,
                               ContactTitle,ContactName,ContactTelephone,ContactEmailAddress, ContactWebsite, ContactAddress,ContactCity,ContactState,ContactPostCode,
                               TesterCompanyName,TesterContactName,TesterTitle, TesterTelephone,TesterEmail, TesterBusinessAddress,TesterCity,TesterWebsite))


                    
                    conn.commit()
                    InsertedMsg = QMessageBox()
                    InsertedMsg.setWindowTitle("Information")
                    InsertedMsg.setText("Information Stored!")
                    InsertedMsg.setIcon(QMessageBox.Information)
                    InsertedMsg.setStandardButtons(QMessageBox.Ok)
                    quitting = InsertedMsg.exec_()                    
                    self.Load_InformationTab_MainDatabase()
                    c.close()
                    conn.close()
                except:
                    pass
            else:
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Empty Fields")
                        InsertedMsg.setText("Please fill in the fields before attempting to add to database!")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
         
 

    #Load Information Tab items to Main Database Overview
    def Load_InformationTab_MainDatabase(self):
        try:
            while self.OverviewDatabaseTable.rowCount() > 0:
                self.OverviewDatabaseTable.removeRow(0)
            conn = sqlite3.connect('Main_Database.db')
            content = 'SELECT Test_ID, Test_Name, Test_Description FROM Test_Details'
            executing_content = conn.execute(content)
            
            for  row_index, row_data in enumerate(executing_content):        
                self.OverviewDatabaseTable.insertRow(row_index)
                for colm_index, colm_data in enumerate(row_data):
                    self.OverviewDatabaseTable.setItem(row_index, colm_index, QTableWidgetItem(str(colm_data)))
            self.OverviewDatabaseTotalTestsLBL.setText("Total Tests: "+str(self.OverviewDatabaseTable.rowCount()))
            conn.close()
            return
        except:
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Load Database")
                        InsertedMsg.setText("Make sure you have a database where the Proofo is located!")
                        InsertedMsg.setDetailedText("If the database is in the same directory as Proofo, then make sure a table exists. If not, start one by saving the information!")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()

    #Only enabling Search Button if user input text into search bar (Main Database)
    def disabledMainDatabaseButton(self):
        if len(self.OverviewDatabaseSearchLineEdit.text()) > 0:
            self.OverviewDatabaseSearchBTN.setEnabled(True)
        else:
            self.OverviewDatabaseSearchBTN.setEnabled(False)
            self.OverviewDatabaseLoadDBBTN.click()

            
    #Search Bar in Main Database
    def handleSearchButton(self):
        columnOfInterest = 0 # or whatever
        searchbar = self.OverviewDatabaseSearchLineEdit.text()

        for rowIndex in range(self.OverviewDatabaseTable.rowCount()):
            twItem = self.OverviewDatabaseTable.item(rowIndex, columnOfInterest)
            if twItem.text() == str(searchbar):
                self.OverviewDatabaseTable.setRowHidden(rowIndex, False)
            else:
                self.OverviewDatabaseTable.setRowHidden(rowIndex, True)

    def on_selection_changed_MainDatabase(self):
        self.OverviewDatabaseExpandSelectedEntryBTN.setEnabled(bool(self.OverviewDatabaseTable.selectionModel().selectedRows()))

    #open expand select entry window for findings
    def Open_Selected_Finding(self):
        whole_row = self.DatabaseTable.currentRow() # Index of Row
        firstColumnInRow = self.DatabaseTable.item(whole_row, 0)
        secondColumnInRow = self.DatabaseTable.item(whole_row, 1)
        thirdColumnInRow = self.DatabaseTable.item(whole_row, 2)
        fourthColumnInRow = self.DatabaseTable.item(whole_row, 3)
        fifthColumnInRow = self.DatabaseTable.item(whole_row, 4)# returns QTableWidgetItem
        if firstColumnInRow and secondColumnInRow and thirdColumnInRow and fourthColumnInRow and fifthColumnInRow is not None:
            
            first_column_name = firstColumnInRow.text() # content of this
            second_column_name = secondColumnInRow.text()
            third_column_name = thirdColumnInRow.text()
            fourth_column_name = fourthColumnInRow.text()
            fifth_column_name = fifthColumnInRow.text()
            #print (test_id_) # if this is a index, you propably dont want it as text

        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()
        querying1 = c.execute('SELECT Name, Criticality, Type, Description, Remediation FROM Findings WHERE Name=? AND Criticality=? AND Type=? AND Description=? AND Remediation=?',
                              (first_column_name, second_column_name, third_column_name, fourth_column_name, fifth_column_name,))
        
        self.window = QtWidgets.QDialog()
        self.ui = Ui_FindingDetailWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        for Name, Criticality, Type, Description, Remediation in querying1.fetchall():
            self.ui.FindingWindowNameTextEdit.setText(str(Name))
            self.ui.FindingWindowCriticalityTextEdit.setText(str(Criticality))
            self.ui.FindingWindowTypeTextEdit.setText(str(Type))
            self.ui.FindingWindowDescriptionTextEdit.setText(str(Description))
            self.ui.FindingWindowRemediationTextEdit.setText(str(Remediation))
        conn.close()
        
    #Rules of Engagement
    #combo box on client IT section and checkboxes
    def select_combo_option(self):
        
        get_index = str(self.AnnouncedorUnAnnouncedComboBox.currentText())
        if get_index ==  "Announced":
            self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setEnabled(False)
            self.TestEndsThereCheckBoxUNANNOUNCED.setEnabled(False)
            self.ContinueTestingCheckBoxUNANNOUNCED.setEnabled(False)
            self.EscalationMatrixCheckBoxUNANNOUNCED.setEnabled(False)
            self.ClientInformedDateTestCheckBoxANNOUNCED.setEnabled(True)
            self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setEnabled(True)
            #checkboxes for announced
            self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setChecked(False)
            self.TestEndsThereCheckBoxUNANNOUNCED.setChecked(False)
            self.ContinueTestingCheckBoxUNANNOUNCED.setChecked(False)
            self.EscalationMatrixCheckBoxUNANNOUNCED.setChecked(False)

        elif get_index == "Unannounced":
            self.ClientInformedDateTestCheckBoxANNOUNCED.setEnabled(False)
            self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setEnabled(False)
            self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setEnabled(True)
            self.TestEndsThereCheckBoxUNANNOUNCED.setEnabled(True)
            self.ContinueTestingCheckBoxUNANNOUNCED.setEnabled(True)
            self.EscalationMatrixCheckBoxUNANNOUNCED.setEnabled(True)
            #checkboxes for unannounced
            self.ClientInformedDateTestCheckBoxANNOUNCED.setChecked(False)
            self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setChecked(False)

        elif get_index == "Select one:":
            self.DiscussIfTestBlockedCheckBoxUNANNOUNCED.setEnabled(True)
            self.TestEndsThereCheckBoxUNANNOUNCED.setEnabled(True)
            self.ContinueTestingCheckBoxUNANNOUNCED.setEnabled(True)
            self.EscalationMatrixCheckBoxUNANNOUNCED.setEnabled(True)
            self.ClientInformedDateTestCheckBoxANNOUNCED.setEnabled(True)
            self.ClientInformedSourceIPTestCheckBoxANNOUNCED.setEnabled(True)
        else:
            pass
    #setting up the type and scope.
    def Type_and_Scope(self):
        get_option = str(self.TypeTestingComboBox.currentText())
        self.ScopeTestingTextBox.setReadOnly(True)
        if get_option == "White Box":
            self.ScopeTestingTextBox.setText("""In white box penetration testing, the testers are provided with all the necessary information about the test target.
This strategy is referred as targeted testing where the testing team and the organization work together to do the test, with all the information provided to the tester prior to test. """)
        elif get_option == "Black Box":
            self.ScopeTestingTextBox.setText("""In black box penetration testing, the testers have no knowledge about the test target.
They have to figure out the loopholes of the system on their own from scratch. This is similar to the blind test strategy, which simulates the actions and procedures of a real attacker who has no information concerning the test target. """)
        elif get_option == "Gray Box":
            self.ScopeTestingTextBox.setText("""In gray box testing, the testers only gain partial disclosure of information about the test target, but not enough for it to be considered white box.
They have to figure out and gather further information about the system on their own.""")
        elif get_option == "Select one:":
            self.ScopeTestingTextBox.clear()
            pass
   
        
    #saving CVE extracted details to Overview Database
    def CVE_Database_Table(self):
        CVE_Test_ID = self.CVETestIDLineEdit.text()
        CVEName = self.CVENameTextEdit.toPlainText()
        CVSS = self.CVSSTextEdit.toPlainText()
        CVEDate = self.CVEDateTextEdit.toPlainText()
        CVECritical_Rating = self.CVECriticalRatingTextEdit.toPlainText()
        CVEDescription = self.CVEDescriptionTextEdit.toPlainText()
        CVERemediation = self.CVERemediationTextEdit.toPlainText()
  
        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()
        try:
            if (str(self.CVETestIDLineEdit.text()) and
            str(self.CVENameTextEdit.toPlainText()) and
            str(self.CVSSTextEdit.toPlainText()) and
            str(self.CVEDateTextEdit.toPlainText()) and
            str(self.CVECriticalRatingTextEdit.toPlainText()) and
            str(self.CVEDescriptionTextEdit.toPlainText()) and
            str(self.CVERemediationTextEdit.toPlainText()))!= "":
                try:
                    c.execute("CREATE TABLE IF NOT EXISTS CVE_Details(Test_ID TEXT, CVE_Name TEXT, CVSS TEXT, CVE_Date TEXT, CVE_Critical_Rating TEXT, CVE_Description TEXT, CVE_Remediation TEXT)")
                    c.execute("INSERT INTO CVE_Details(Test_ID, CVE_Name, CVSS, CVE_Date, CVE_Critical_Rating, CVE_Description, CVE_Remediation) VALUES(?,?,?,?,?,?,?)", (CVE_Test_ID, CVEName,CVSS,CVEDate,CVECritical_Rating,CVEDescription,CVERemediation))
                    conn.commit()
                    InsertedMsg = QMessageBox()
                    InsertedMsg.setWindowTitle("CVE")
                    InsertedMsg.setText("Information Stored!")
                    InsertedMsg.setIcon(QMessageBox.Information)
                    InsertedMsg.setStandardButtons(QMessageBox.Ok)
                    quitting = InsertedMsg.exec_()                    
                    c.close()
                    conn.close()
                except:
                        pass
            else:
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("No Action")
                        InsertedMsg.setText("Please enter URL and click Extract to add to database!")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
        except:       
                        InsertedMsg = QMessageBox()
                        InsertedMsg.setWindowTitle("Error")
                        InsertedMsg.setText("Unknown Error: Make sure fields are properly filled")
                        InsertedMsg.setDetailedText("""Syntax: None""")
                        InsertedMsg.setIcon(QMessageBox.Warning)
                        InsertedMsg.setStandardButtons(QMessageBox.Ok)
                        quitting = InsertedMsg.exec_()
                        pass

    #open expand select entry window for main db
    def Open_Selected_Entry_Window(self):
        whole_row = self.OverviewDatabaseTable.currentRow() # Index of Row
        firstColumnInRow = self.OverviewDatabaseTable.item(whole_row, 0) # returns QTableWidgetItem
        test_id_ = firstColumnInRow.text() # content of this

        conn = sqlite3.connect('Main_Database.db')
        c = conn.cursor()
        querying = c.execute('''SELECT Test_ID, Report_Title, Assessment_Type, Scoring_Type, Full_Company_Name, Short_Company_Name,
                                                Contact_Title, Contact_Name, Contact_Telephone, Contact_Email_Address, Contact_Website, Contact_Address, Contact_City, Contact_State, Contact_Post_Code,
                                                Tester_Company, Tester_Title, Tester_Name, Tester_Telephone, Tester_Email, Tester_Business_Address, Tester_City, Tester_Website FROM Test_Details WHERE Test_ID=?''', (test_id_,))    

        self.window = QtWidgets.QDialog()
        self.ui = Ui_TestOverviewWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        
        #querying for the Information Database        
        for (Test_ID, Report_Title, Assessment_Type, Scoring_Type, Full_Company_Name, Short_Company_Name,
                 Contact_Title, Contact_Name, Contact_Telephone, Contact_Email_Address, Contact_Website, Contact_Address, Contact_City, Contact_State, Contact_Post_Code,
                 Tester_Company, Tester_Title, Tester_Name, Tester_Telephone, Tester_Email, Tester_Business_Address, Tester_City, Tester_Website) in querying.fetchall():
            """ Report Information"""
            self.ui.InformationOverviewTestIDLineEdit.setText(str(Test_ID))
            self.ui.ReportTitleBox_2_Window.setText(str(Report_Title))
            self.ui.AssessmentTypeBox_2_Window.setText(str(Assessment_Type))
            self.ui.ScoringTypeBox_2_Window.setText(str(Scoring_Type))
            self.ui.FullCompNameBox_2_Window.setText(str(Full_Company_Name))
            self.ui.ShortCompNameBox_2_Window.setText(str(Short_Company_Name))

            """ Contact Information"""
            self.ui.ContactTitleBox_2_Window.setText(str(Contact_Title))
            self.ui.ContactNameBox_2_Window.setText(str(Contact_Name))
            self.ui.ContactTelephoneBox_Window.setText(str(Contact_Telephone))
            self.ui.ContactEmailBox_2_Window.setText(str(Contact_Email_Address))
            self.ui.CompWebsiteBox_2_Window.setText(str(Contact_Website))
            self.ui.CompAddressBox_2_Window.setText(str(Contact_Address))
            self.ui.CompCityBox_2_Window.setText(str(Contact_City))
            self.ui.StateBox_2_Window.setText(str(Contact_State))
            self.ui.CompPostCodeBox_2_Window.setText(str(Contact_Post_Code))

            """ Tester Information"""
            self.ui.ConsultantCompanyNameBox_Window.setText(str(Tester_Company))
            self.ui.ConsultantTitleBox_Window.setText(str(Tester_Title))
            self.ui.TesterName_NewWindow.setText(str(Tester_Name))
            self.ui.ConsultantTelephoneBox_Window.setText(str(Tester_Telephone))
            self.ui.ConsultantEmailBox_Window.setText(str(Tester_Email))
            self.ui.ConsultantBusinessAddressBox_Window.setText(str(Tester_Business_Address))
            self.ui.ConsultantCityBox_Window.setText(str(Tester_City))
            self.ui.ConsultantWebsiteBox_Window.setText(str(Tester_Website))

         #querying for the CVE Database    
        querying1 = c.execute("SELECT Test_ID, CVE_Name, CVSS, CVE_Date, CVE_Critical_Rating, CVE_Description, CVE_Remediation FROM CVE_Details WHERE Test_ID=?", (test_id_,))
        for Test_ID, CVE_Name, CVSS, CVE_Date, CVE_Critical_Rating, CVE_Description, CVE_Remediation in querying1.fetchall():
            """ CVE Details""" 
            self.ui.CVENameTextEdit_Window.setText(str(CVE_Name))
            self.ui.CVSSTextEdit_Window.setText(str(CVSS))
            self.ui.CVEDateTextEdit_Window.setText(str(CVE_Date))
            self.ui.CVECriticalRatingTextEdit_Window.setText(str(CVE_Critical_Rating))
            self.ui.CVEDescriptionTextEdit_Window.setText(str(CVE_Description))
            self.ui.CVERemediationTextEdit_Window.setText(str(CVE_Remediation))

        #querying for the Summaries Database
        querying3 = c.execute("SELECT Test_ID, Executive_Summary, Scope, Project_Objectives, Assumptions, Summary_Recommendations, Methodology FROM Summaries WHERE Test_ID=?", (test_id_,))   
        for Test_ID, Executive_Summary,Scope,Project_Objectives,Assumptions,Summary_Recommendations,Methodology in querying3.fetchall():
            """ Findings Details"""    
            self.ui.ExecutiveSummaryTextEdit_Window.setText(str(Executive_Summary))
            self.ui.ScopeTextEdit_Window.setText(str(Scope))
            self.ui.ProjectObjectivesTextEdit_Window.setText(str(Project_Objectives))
            self.ui.AssumptionTextEdit_Window.setText(str(Assumptions))
            self.ui.SummaryofRecommendationTextEdit_Window.setText(str(Summary_Recommendations))
            self.ui.MethodologyTextEdit_Window.setText(str(Methodology))


        try:
            while self.ui.SummaryFindingsDB_Window.rowCount() > 0:
                self.ui.SummaryFindingsDB_Window.removeRow(0)
            conn = sqlite3.connect('Main_Database.db')
            test_id1 = self.ui.InformationOverviewTestIDLineEdit.text()
            if (str(self.ui.InformationOverviewTestIDLineEdit.text())) != "":
                for  row_index, row_data in enumerate(c.execute('SELECT Summary_Findings_Name, Summary_Findings_Desc, Summary_Findings_Risk FROM Findings_Summaries WHERE Test_ID=?', [test_id1])):
                    self.ui.SummaryFindingsDB_Window.insertRow(row_index)
                    for colm_index, colm_data in enumerate(row_data):
                                   self.ui.SummaryFindingsDB_Window.setItem(row_index, colm_index, QTableWidgetItem(str(colm_data)))
                return
        except Exception as e:
            print(e)

        conn.close()

            
#Just displays errors instead of ommiting them
        
sys._excepthook = sys.excepthook 
def exception_hook(exctype, value, traceback):
    print(exctype, value, traceback)
    sys._excepthook(exctype, value, traceback) 
    sys.exit(1) 
sys.excepthook = exception_hook 




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Proofo = QtWidgets.QMainWindow()
    ui = Ui_Proofo()
    ui.setupUi(Proofo)
    Proofo.show()
    sys.exit(app.exec_())
